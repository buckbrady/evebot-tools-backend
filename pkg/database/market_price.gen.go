// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/buckbrady/evebot-tools-backend/pkg/model"
)

func newMarketPrice(db *gorm.DB, opts ...gen.DOOption) marketPrice {
	_marketPrice := marketPrice{}

	_marketPrice.marketPriceDo.UseDB(db, opts...)
	_marketPrice.marketPriceDo.UseModel(&model.MarketPrice{})

	tableName := _marketPrice.marketPriceDo.TableName()
	_marketPrice.ALL = field.NewAsterisk(tableName)
	_marketPrice.TypeID = field.NewInt32(tableName, "type_id")
	_marketPrice.AveragePrice = field.NewFloat64(tableName, "average_price")
	_marketPrice.AdjustedPrice = field.NewFloat64(tableName, "adjusted_price")
	_marketPrice.Timestamp = field.NewTime(tableName, "timestamp")

	_marketPrice.fillFieldMap()

	return _marketPrice
}

type marketPrice struct {
	marketPriceDo marketPriceDo

	ALL           field.Asterisk
	TypeID        field.Int32
	AveragePrice  field.Float64
	AdjustedPrice field.Float64
	Timestamp     field.Time

	fieldMap map[string]field.Expr
}

func (m marketPrice) Table(newTableName string) *marketPrice {
	m.marketPriceDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m marketPrice) As(alias string) *marketPrice {
	m.marketPriceDo.DO = *(m.marketPriceDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *marketPrice) updateTableName(table string) *marketPrice {
	m.ALL = field.NewAsterisk(table)
	m.TypeID = field.NewInt32(table, "type_id")
	m.AveragePrice = field.NewFloat64(table, "average_price")
	m.AdjustedPrice = field.NewFloat64(table, "adjusted_price")
	m.Timestamp = field.NewTime(table, "timestamp")

	m.fillFieldMap()

	return m
}

func (m *marketPrice) WithContext(ctx context.Context) *marketPriceDo {
	return m.marketPriceDo.WithContext(ctx)
}

func (m marketPrice) TableName() string { return m.marketPriceDo.TableName() }

func (m marketPrice) Alias() string { return m.marketPriceDo.Alias() }

func (m marketPrice) Columns(cols ...field.Expr) gen.Columns { return m.marketPriceDo.Columns(cols...) }

func (m *marketPrice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *marketPrice) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 4)
	m.fieldMap["type_id"] = m.TypeID
	m.fieldMap["average_price"] = m.AveragePrice
	m.fieldMap["adjusted_price"] = m.AdjustedPrice
	m.fieldMap["timestamp"] = m.Timestamp
}

func (m marketPrice) clone(db *gorm.DB) marketPrice {
	m.marketPriceDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m marketPrice) replaceDB(db *gorm.DB) marketPrice {
	m.marketPriceDo.ReplaceDB(db)
	return m
}

type marketPriceDo struct{ gen.DO }

func (m marketPriceDo) Debug() *marketPriceDo {
	return m.withDO(m.DO.Debug())
}

func (m marketPriceDo) WithContext(ctx context.Context) *marketPriceDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m marketPriceDo) ReadDB() *marketPriceDo {
	return m.Clauses(dbresolver.Read)
}

func (m marketPriceDo) WriteDB() *marketPriceDo {
	return m.Clauses(dbresolver.Write)
}

func (m marketPriceDo) Session(config *gorm.Session) *marketPriceDo {
	return m.withDO(m.DO.Session(config))
}

func (m marketPriceDo) Clauses(conds ...clause.Expression) *marketPriceDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m marketPriceDo) Returning(value interface{}, columns ...string) *marketPriceDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m marketPriceDo) Not(conds ...gen.Condition) *marketPriceDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m marketPriceDo) Or(conds ...gen.Condition) *marketPriceDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m marketPriceDo) Select(conds ...field.Expr) *marketPriceDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m marketPriceDo) Where(conds ...gen.Condition) *marketPriceDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m marketPriceDo) Order(conds ...field.Expr) *marketPriceDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m marketPriceDo) Distinct(cols ...field.Expr) *marketPriceDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m marketPriceDo) Omit(cols ...field.Expr) *marketPriceDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m marketPriceDo) Join(table schema.Tabler, on ...field.Expr) *marketPriceDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m marketPriceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *marketPriceDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m marketPriceDo) RightJoin(table schema.Tabler, on ...field.Expr) *marketPriceDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m marketPriceDo) Group(cols ...field.Expr) *marketPriceDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m marketPriceDo) Having(conds ...gen.Condition) *marketPriceDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m marketPriceDo) Limit(limit int) *marketPriceDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m marketPriceDo) Offset(offset int) *marketPriceDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m marketPriceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *marketPriceDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m marketPriceDo) Unscoped() *marketPriceDo {
	return m.withDO(m.DO.Unscoped())
}

func (m marketPriceDo) Create(values ...*model.MarketPrice) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m marketPriceDo) CreateInBatches(values []*model.MarketPrice, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m marketPriceDo) Save(values ...*model.MarketPrice) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m marketPriceDo) First() (*model.MarketPrice, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketPrice), nil
	}
}

func (m marketPriceDo) Take() (*model.MarketPrice, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketPrice), nil
	}
}

func (m marketPriceDo) Last() (*model.MarketPrice, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketPrice), nil
	}
}

func (m marketPriceDo) Find() ([]*model.MarketPrice, error) {
	result, err := m.DO.Find()
	return result.([]*model.MarketPrice), err
}

func (m marketPriceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MarketPrice, err error) {
	buf := make([]*model.MarketPrice, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m marketPriceDo) FindInBatches(result *[]*model.MarketPrice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m marketPriceDo) Attrs(attrs ...field.AssignExpr) *marketPriceDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m marketPriceDo) Assign(attrs ...field.AssignExpr) *marketPriceDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m marketPriceDo) Joins(fields ...field.RelationField) *marketPriceDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m marketPriceDo) Preload(fields ...field.RelationField) *marketPriceDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m marketPriceDo) FirstOrInit() (*model.MarketPrice, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketPrice), nil
	}
}

func (m marketPriceDo) FirstOrCreate() (*model.MarketPrice, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketPrice), nil
	}
}

func (m marketPriceDo) FindByPage(offset int, limit int) (result []*model.MarketPrice, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m marketPriceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m marketPriceDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m marketPriceDo) Delete(models ...*model.MarketPrice) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *marketPriceDo) withDO(do gen.Dao) *marketPriceDo {
	m.DO = *do.(*gen.DO)
	return m
}
