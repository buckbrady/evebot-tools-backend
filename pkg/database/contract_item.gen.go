// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/buckbrady/evebot-tools-backend/pkg/model"
)

func newContractItem(db *gorm.DB, opts ...gen.DOOption) contractItem {
	_contractItem := contractItem{}

	_contractItem.contractItemDo.UseDB(db, opts...)
	_contractItem.contractItemDo.UseModel(&model.ContractItem{})

	tableName := _contractItem.contractItemDo.TableName()
	_contractItem.ALL = field.NewAsterisk(tableName)
	_contractItem.ID = field.NewInt32(tableName, "id")
	_contractItem.IsIncluded = field.NewBool(tableName, "is_included")
	_contractItem.IsBlueprintCopy = field.NewBool(tableName, "is_blueprint_copy")
	_contractItem.ItemID = field.NewInt64(tableName, "item_id")
	_contractItem.MaterialEfficiency = field.NewInt32(tableName, "material_efficiency")
	_contractItem.Quantity = field.NewInt32(tableName, "quantity")
	_contractItem.RecordID = field.NewInt32(tableName, "record_id")
	_contractItem.Runs = field.NewInt32(tableName, "runs")
	_contractItem.TimeEfficiency = field.NewInt32(tableName, "time_efficiency")

	_contractItem.fillFieldMap()

	return _contractItem
}

type contractItem struct {
	contractItemDo contractItemDo

	ALL                field.Asterisk
	ID                 field.Int32
	IsIncluded         field.Bool
	IsBlueprintCopy    field.Bool
	ItemID             field.Int64
	MaterialEfficiency field.Int32
	Quantity           field.Int32
	RecordID           field.Int32
	Runs               field.Int32
	TimeEfficiency     field.Int32

	fieldMap map[string]field.Expr
}

func (c contractItem) Table(newTableName string) *contractItem {
	c.contractItemDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c contractItem) As(alias string) *contractItem {
	c.contractItemDo.DO = *(c.contractItemDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *contractItem) updateTableName(table string) *contractItem {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.IsIncluded = field.NewBool(table, "is_included")
	c.IsBlueprintCopy = field.NewBool(table, "is_blueprint_copy")
	c.ItemID = field.NewInt64(table, "item_id")
	c.MaterialEfficiency = field.NewInt32(table, "material_efficiency")
	c.Quantity = field.NewInt32(table, "quantity")
	c.RecordID = field.NewInt32(table, "record_id")
	c.Runs = field.NewInt32(table, "runs")
	c.TimeEfficiency = field.NewInt32(table, "time_efficiency")

	c.fillFieldMap()

	return c
}

func (c *contractItem) WithContext(ctx context.Context) *contractItemDo {
	return c.contractItemDo.WithContext(ctx)
}

func (c contractItem) TableName() string { return c.contractItemDo.TableName() }

func (c contractItem) Alias() string { return c.contractItemDo.Alias() }

func (c contractItem) Columns(cols ...field.Expr) gen.Columns {
	return c.contractItemDo.Columns(cols...)
}

func (c *contractItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *contractItem) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["is_included"] = c.IsIncluded
	c.fieldMap["is_blueprint_copy"] = c.IsBlueprintCopy
	c.fieldMap["item_id"] = c.ItemID
	c.fieldMap["material_efficiency"] = c.MaterialEfficiency
	c.fieldMap["quantity"] = c.Quantity
	c.fieldMap["record_id"] = c.RecordID
	c.fieldMap["runs"] = c.Runs
	c.fieldMap["time_efficiency"] = c.TimeEfficiency
}

func (c contractItem) clone(db *gorm.DB) contractItem {
	c.contractItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c contractItem) replaceDB(db *gorm.DB) contractItem {
	c.contractItemDo.ReplaceDB(db)
	return c
}

type contractItemDo struct{ gen.DO }

func (c contractItemDo) Debug() *contractItemDo {
	return c.withDO(c.DO.Debug())
}

func (c contractItemDo) WithContext(ctx context.Context) *contractItemDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c contractItemDo) ReadDB() *contractItemDo {
	return c.Clauses(dbresolver.Read)
}

func (c contractItemDo) WriteDB() *contractItemDo {
	return c.Clauses(dbresolver.Write)
}

func (c contractItemDo) Session(config *gorm.Session) *contractItemDo {
	return c.withDO(c.DO.Session(config))
}

func (c contractItemDo) Clauses(conds ...clause.Expression) *contractItemDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c contractItemDo) Returning(value interface{}, columns ...string) *contractItemDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c contractItemDo) Not(conds ...gen.Condition) *contractItemDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c contractItemDo) Or(conds ...gen.Condition) *contractItemDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c contractItemDo) Select(conds ...field.Expr) *contractItemDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c contractItemDo) Where(conds ...gen.Condition) *contractItemDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c contractItemDo) Order(conds ...field.Expr) *contractItemDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c contractItemDo) Distinct(cols ...field.Expr) *contractItemDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c contractItemDo) Omit(cols ...field.Expr) *contractItemDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c contractItemDo) Join(table schema.Tabler, on ...field.Expr) *contractItemDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c contractItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) *contractItemDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c contractItemDo) RightJoin(table schema.Tabler, on ...field.Expr) *contractItemDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c contractItemDo) Group(cols ...field.Expr) *contractItemDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c contractItemDo) Having(conds ...gen.Condition) *contractItemDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c contractItemDo) Limit(limit int) *contractItemDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c contractItemDo) Offset(offset int) *contractItemDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c contractItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *contractItemDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c contractItemDo) Unscoped() *contractItemDo {
	return c.withDO(c.DO.Unscoped())
}

func (c contractItemDo) Create(values ...*model.ContractItem) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c contractItemDo) CreateInBatches(values []*model.ContractItem, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c contractItemDo) Save(values ...*model.ContractItem) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c contractItemDo) First() (*model.ContractItem, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContractItem), nil
	}
}

func (c contractItemDo) Take() (*model.ContractItem, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContractItem), nil
	}
}

func (c contractItemDo) Last() (*model.ContractItem, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContractItem), nil
	}
}

func (c contractItemDo) Find() ([]*model.ContractItem, error) {
	result, err := c.DO.Find()
	return result.([]*model.ContractItem), err
}

func (c contractItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ContractItem, err error) {
	buf := make([]*model.ContractItem, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c contractItemDo) FindInBatches(result *[]*model.ContractItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c contractItemDo) Attrs(attrs ...field.AssignExpr) *contractItemDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c contractItemDo) Assign(attrs ...field.AssignExpr) *contractItemDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c contractItemDo) Joins(fields ...field.RelationField) *contractItemDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c contractItemDo) Preload(fields ...field.RelationField) *contractItemDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c contractItemDo) FirstOrInit() (*model.ContractItem, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContractItem), nil
	}
}

func (c contractItemDo) FirstOrCreate() (*model.ContractItem, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContractItem), nil
	}
}

func (c contractItemDo) FindByPage(offset int, limit int) (result []*model.ContractItem, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c contractItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c contractItemDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c contractItemDo) Delete(models ...*model.ContractItem) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *contractItemDo) withDO(do gen.Dao) *contractItemDo {
	c.DO = *do.(*gen.DO)
	return c
}
