// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/buckbrady/evebot-tools-backend/pkg/model"
)

func newKillmailAttacker(db *gorm.DB, opts ...gen.DOOption) killmailAttacker {
	_killmailAttacker := killmailAttacker{}

	_killmailAttacker.killmailAttackerDo.UseDB(db, opts...)
	_killmailAttacker.killmailAttackerDo.UseModel(&model.KillmailAttacker{})

	tableName := _killmailAttacker.killmailAttackerDo.TableName()
	_killmailAttacker.ALL = field.NewAsterisk(tableName)
	_killmailAttacker.ID = field.NewInt64(tableName, "id")
	_killmailAttacker.CharacterID = field.NewInt32(tableName, "character_id")
	_killmailAttacker.CorporationID = field.NewInt32(tableName, "corporation_id")
	_killmailAttacker.AllianceID = field.NewInt32(tableName, "alliance_id")
	_killmailAttacker.FactionID = field.NewInt32(tableName, "faction_id")
	_killmailAttacker.DamageDone = field.NewInt32(tableName, "damage_done")
	_killmailAttacker.FinalBlow = field.NewBool(tableName, "final_blow")
	_killmailAttacker.SecurityStatus = field.NewFloat64(tableName, "security_status")
	_killmailAttacker.WeaponTypeID = field.NewInt32(tableName, "weapon_type_id")
	_killmailAttacker.ShipTypeID = field.NewInt32(tableName, "ship_type_id")
	_killmailAttacker.KillmailID = field.NewInt64(tableName, "killmail_id")

	_killmailAttacker.fillFieldMap()

	return _killmailAttacker
}

type killmailAttacker struct {
	killmailAttackerDo killmailAttackerDo

	ALL            field.Asterisk
	ID             field.Int64
	CharacterID    field.Int32
	CorporationID  field.Int32
	AllianceID     field.Int32
	FactionID      field.Int32
	DamageDone     field.Int32
	FinalBlow      field.Bool
	SecurityStatus field.Float64
	WeaponTypeID   field.Int32
	ShipTypeID     field.Int32
	KillmailID     field.Int64

	fieldMap map[string]field.Expr
}

func (k killmailAttacker) Table(newTableName string) *killmailAttacker {
	k.killmailAttackerDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k killmailAttacker) As(alias string) *killmailAttacker {
	k.killmailAttackerDo.DO = *(k.killmailAttackerDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *killmailAttacker) updateTableName(table string) *killmailAttacker {
	k.ALL = field.NewAsterisk(table)
	k.ID = field.NewInt64(table, "id")
	k.CharacterID = field.NewInt32(table, "character_id")
	k.CorporationID = field.NewInt32(table, "corporation_id")
	k.AllianceID = field.NewInt32(table, "alliance_id")
	k.FactionID = field.NewInt32(table, "faction_id")
	k.DamageDone = field.NewInt32(table, "damage_done")
	k.FinalBlow = field.NewBool(table, "final_blow")
	k.SecurityStatus = field.NewFloat64(table, "security_status")
	k.WeaponTypeID = field.NewInt32(table, "weapon_type_id")
	k.ShipTypeID = field.NewInt32(table, "ship_type_id")
	k.KillmailID = field.NewInt64(table, "killmail_id")

	k.fillFieldMap()

	return k
}

func (k *killmailAttacker) WithContext(ctx context.Context) *killmailAttackerDo {
	return k.killmailAttackerDo.WithContext(ctx)
}

func (k killmailAttacker) TableName() string { return k.killmailAttackerDo.TableName() }

func (k killmailAttacker) Alias() string { return k.killmailAttackerDo.Alias() }

func (k killmailAttacker) Columns(cols ...field.Expr) gen.Columns {
	return k.killmailAttackerDo.Columns(cols...)
}

func (k *killmailAttacker) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *killmailAttacker) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 11)
	k.fieldMap["id"] = k.ID
	k.fieldMap["character_id"] = k.CharacterID
	k.fieldMap["corporation_id"] = k.CorporationID
	k.fieldMap["alliance_id"] = k.AllianceID
	k.fieldMap["faction_id"] = k.FactionID
	k.fieldMap["damage_done"] = k.DamageDone
	k.fieldMap["final_blow"] = k.FinalBlow
	k.fieldMap["security_status"] = k.SecurityStatus
	k.fieldMap["weapon_type_id"] = k.WeaponTypeID
	k.fieldMap["ship_type_id"] = k.ShipTypeID
	k.fieldMap["killmail_id"] = k.KillmailID
}

func (k killmailAttacker) clone(db *gorm.DB) killmailAttacker {
	k.killmailAttackerDo.ReplaceConnPool(db.Statement.ConnPool)
	return k
}

func (k killmailAttacker) replaceDB(db *gorm.DB) killmailAttacker {
	k.killmailAttackerDo.ReplaceDB(db)
	return k
}

type killmailAttackerDo struct{ gen.DO }

func (k killmailAttackerDo) Debug() *killmailAttackerDo {
	return k.withDO(k.DO.Debug())
}

func (k killmailAttackerDo) WithContext(ctx context.Context) *killmailAttackerDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k killmailAttackerDo) ReadDB() *killmailAttackerDo {
	return k.Clauses(dbresolver.Read)
}

func (k killmailAttackerDo) WriteDB() *killmailAttackerDo {
	return k.Clauses(dbresolver.Write)
}

func (k killmailAttackerDo) Session(config *gorm.Session) *killmailAttackerDo {
	return k.withDO(k.DO.Session(config))
}

func (k killmailAttackerDo) Clauses(conds ...clause.Expression) *killmailAttackerDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k killmailAttackerDo) Returning(value interface{}, columns ...string) *killmailAttackerDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k killmailAttackerDo) Not(conds ...gen.Condition) *killmailAttackerDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k killmailAttackerDo) Or(conds ...gen.Condition) *killmailAttackerDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k killmailAttackerDo) Select(conds ...field.Expr) *killmailAttackerDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k killmailAttackerDo) Where(conds ...gen.Condition) *killmailAttackerDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k killmailAttackerDo) Order(conds ...field.Expr) *killmailAttackerDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k killmailAttackerDo) Distinct(cols ...field.Expr) *killmailAttackerDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k killmailAttackerDo) Omit(cols ...field.Expr) *killmailAttackerDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k killmailAttackerDo) Join(table schema.Tabler, on ...field.Expr) *killmailAttackerDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k killmailAttackerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *killmailAttackerDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k killmailAttackerDo) RightJoin(table schema.Tabler, on ...field.Expr) *killmailAttackerDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k killmailAttackerDo) Group(cols ...field.Expr) *killmailAttackerDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k killmailAttackerDo) Having(conds ...gen.Condition) *killmailAttackerDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k killmailAttackerDo) Limit(limit int) *killmailAttackerDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k killmailAttackerDo) Offset(offset int) *killmailAttackerDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k killmailAttackerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *killmailAttackerDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k killmailAttackerDo) Unscoped() *killmailAttackerDo {
	return k.withDO(k.DO.Unscoped())
}

func (k killmailAttackerDo) Create(values ...*model.KillmailAttacker) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k killmailAttackerDo) CreateInBatches(values []*model.KillmailAttacker, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k killmailAttackerDo) Save(values ...*model.KillmailAttacker) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k killmailAttackerDo) First() (*model.KillmailAttacker, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.KillmailAttacker), nil
	}
}

func (k killmailAttackerDo) Take() (*model.KillmailAttacker, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.KillmailAttacker), nil
	}
}

func (k killmailAttackerDo) Last() (*model.KillmailAttacker, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.KillmailAttacker), nil
	}
}

func (k killmailAttackerDo) Find() ([]*model.KillmailAttacker, error) {
	result, err := k.DO.Find()
	return result.([]*model.KillmailAttacker), err
}

func (k killmailAttackerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.KillmailAttacker, err error) {
	buf := make([]*model.KillmailAttacker, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k killmailAttackerDo) FindInBatches(result *[]*model.KillmailAttacker, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k killmailAttackerDo) Attrs(attrs ...field.AssignExpr) *killmailAttackerDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k killmailAttackerDo) Assign(attrs ...field.AssignExpr) *killmailAttackerDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k killmailAttackerDo) Joins(fields ...field.RelationField) *killmailAttackerDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k killmailAttackerDo) Preload(fields ...field.RelationField) *killmailAttackerDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k killmailAttackerDo) FirstOrInit() (*model.KillmailAttacker, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.KillmailAttacker), nil
	}
}

func (k killmailAttackerDo) FirstOrCreate() (*model.KillmailAttacker, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.KillmailAttacker), nil
	}
}

func (k killmailAttackerDo) FindByPage(offset int, limit int) (result []*model.KillmailAttacker, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k killmailAttackerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k killmailAttackerDo) Scan(result interface{}) (err error) {
	return k.DO.Scan(result)
}

func (k killmailAttackerDo) Delete(models ...*model.KillmailAttacker) (result gen.ResultInfo, err error) {
	return k.DO.Delete(models)
}

func (k *killmailAttackerDo) withDO(do gen.Dao) *killmailAttackerDo {
	k.DO = *do.(*gen.DO)
	return k
}
