// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/buckbrady/evebot-tools-backend/pkg/model"
)

func newUniverseConstellation(db *gorm.DB, opts ...gen.DOOption) universeConstellation {
	_universeConstellation := universeConstellation{}

	_universeConstellation.universeConstellationDo.UseDB(db, opts...)
	_universeConstellation.universeConstellationDo.UseModel(&model.UniverseConstellation{})

	tableName := _universeConstellation.universeConstellationDo.TableName()
	_universeConstellation.ALL = field.NewAsterisk(tableName)
	_universeConstellation.ID = field.NewInt32(tableName, "id")
	_universeConstellation.Name = field.NewString(tableName, "name")
	_universeConstellation.RegionID = field.NewInt32(tableName, "region_id")
	_universeConstellation.PositionX = field.NewFloat64(tableName, "position_x")
	_universeConstellation.PositionY = field.NewFloat64(tableName, "position_y")
	_universeConstellation.PositionZ = field.NewFloat64(tableName, "position_z")

	_universeConstellation.fillFieldMap()

	return _universeConstellation
}

type universeConstellation struct {
	universeConstellationDo universeConstellationDo

	ALL       field.Asterisk
	ID        field.Int32
	Name      field.String
	RegionID  field.Int32
	PositionX field.Float64
	PositionY field.Float64
	PositionZ field.Float64

	fieldMap map[string]field.Expr
}

func (u universeConstellation) Table(newTableName string) *universeConstellation {
	u.universeConstellationDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u universeConstellation) As(alias string) *universeConstellation {
	u.universeConstellationDo.DO = *(u.universeConstellationDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *universeConstellation) updateTableName(table string) *universeConstellation {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.Name = field.NewString(table, "name")
	u.RegionID = field.NewInt32(table, "region_id")
	u.PositionX = field.NewFloat64(table, "position_x")
	u.PositionY = field.NewFloat64(table, "position_y")
	u.PositionZ = field.NewFloat64(table, "position_z")

	u.fillFieldMap()

	return u
}

func (u *universeConstellation) WithContext(ctx context.Context) *universeConstellationDo {
	return u.universeConstellationDo.WithContext(ctx)
}

func (u universeConstellation) TableName() string { return u.universeConstellationDo.TableName() }

func (u universeConstellation) Alias() string { return u.universeConstellationDo.Alias() }

func (u universeConstellation) Columns(cols ...field.Expr) gen.Columns {
	return u.universeConstellationDo.Columns(cols...)
}

func (u *universeConstellation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *universeConstellation) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["name"] = u.Name
	u.fieldMap["region_id"] = u.RegionID
	u.fieldMap["position_x"] = u.PositionX
	u.fieldMap["position_y"] = u.PositionY
	u.fieldMap["position_z"] = u.PositionZ
}

func (u universeConstellation) clone(db *gorm.DB) universeConstellation {
	u.universeConstellationDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u universeConstellation) replaceDB(db *gorm.DB) universeConstellation {
	u.universeConstellationDo.ReplaceDB(db)
	return u
}

type universeConstellationDo struct{ gen.DO }

func (u universeConstellationDo) Debug() *universeConstellationDo {
	return u.withDO(u.DO.Debug())
}

func (u universeConstellationDo) WithContext(ctx context.Context) *universeConstellationDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u universeConstellationDo) ReadDB() *universeConstellationDo {
	return u.Clauses(dbresolver.Read)
}

func (u universeConstellationDo) WriteDB() *universeConstellationDo {
	return u.Clauses(dbresolver.Write)
}

func (u universeConstellationDo) Session(config *gorm.Session) *universeConstellationDo {
	return u.withDO(u.DO.Session(config))
}

func (u universeConstellationDo) Clauses(conds ...clause.Expression) *universeConstellationDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u universeConstellationDo) Returning(value interface{}, columns ...string) *universeConstellationDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u universeConstellationDo) Not(conds ...gen.Condition) *universeConstellationDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u universeConstellationDo) Or(conds ...gen.Condition) *universeConstellationDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u universeConstellationDo) Select(conds ...field.Expr) *universeConstellationDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u universeConstellationDo) Where(conds ...gen.Condition) *universeConstellationDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u universeConstellationDo) Order(conds ...field.Expr) *universeConstellationDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u universeConstellationDo) Distinct(cols ...field.Expr) *universeConstellationDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u universeConstellationDo) Omit(cols ...field.Expr) *universeConstellationDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u universeConstellationDo) Join(table schema.Tabler, on ...field.Expr) *universeConstellationDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u universeConstellationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *universeConstellationDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u universeConstellationDo) RightJoin(table schema.Tabler, on ...field.Expr) *universeConstellationDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u universeConstellationDo) Group(cols ...field.Expr) *universeConstellationDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u universeConstellationDo) Having(conds ...gen.Condition) *universeConstellationDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u universeConstellationDo) Limit(limit int) *universeConstellationDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u universeConstellationDo) Offset(offset int) *universeConstellationDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u universeConstellationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *universeConstellationDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u universeConstellationDo) Unscoped() *universeConstellationDo {
	return u.withDO(u.DO.Unscoped())
}

func (u universeConstellationDo) Create(values ...*model.UniverseConstellation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u universeConstellationDo) CreateInBatches(values []*model.UniverseConstellation, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u universeConstellationDo) Save(values ...*model.UniverseConstellation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u universeConstellationDo) First() (*model.UniverseConstellation, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseConstellation), nil
	}
}

func (u universeConstellationDo) Take() (*model.UniverseConstellation, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseConstellation), nil
	}
}

func (u universeConstellationDo) Last() (*model.UniverseConstellation, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseConstellation), nil
	}
}

func (u universeConstellationDo) Find() ([]*model.UniverseConstellation, error) {
	result, err := u.DO.Find()
	return result.([]*model.UniverseConstellation), err
}

func (u universeConstellationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UniverseConstellation, err error) {
	buf := make([]*model.UniverseConstellation, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u universeConstellationDo) FindInBatches(result *[]*model.UniverseConstellation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u universeConstellationDo) Attrs(attrs ...field.AssignExpr) *universeConstellationDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u universeConstellationDo) Assign(attrs ...field.AssignExpr) *universeConstellationDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u universeConstellationDo) Joins(fields ...field.RelationField) *universeConstellationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u universeConstellationDo) Preload(fields ...field.RelationField) *universeConstellationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u universeConstellationDo) FirstOrInit() (*model.UniverseConstellation, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseConstellation), nil
	}
}

func (u universeConstellationDo) FirstOrCreate() (*model.UniverseConstellation, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseConstellation), nil
	}
}

func (u universeConstellationDo) FindByPage(offset int, limit int) (result []*model.UniverseConstellation, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u universeConstellationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u universeConstellationDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u universeConstellationDo) Delete(models ...*model.UniverseConstellation) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *universeConstellationDo) withDO(do gen.Dao) *universeConstellationDo {
	u.DO = *do.(*gen.DO)
	return u
}
