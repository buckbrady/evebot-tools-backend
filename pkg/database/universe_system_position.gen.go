// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/buckbrady/evebot-tools-backend/pkg/model"
)

func newUniverseSystemPosition(db *gorm.DB, opts ...gen.DOOption) universeSystemPosition {
	_universeSystemPosition := universeSystemPosition{}

	_universeSystemPosition.universeSystemPositionDo.UseDB(db, opts...)
	_universeSystemPosition.universeSystemPositionDo.UseModel(&model.UniverseSystemPosition{})

	tableName := _universeSystemPosition.universeSystemPositionDo.TableName()
	_universeSystemPosition.ALL = field.NewAsterisk(tableName)
	_universeSystemPosition.ID = field.NewInt32(tableName, "id")
	_universeSystemPosition.PositionX = field.NewFloat64(tableName, "position_x")
	_universeSystemPosition.PositionY = field.NewFloat64(tableName, "position_y")
	_universeSystemPosition.PositionZ = field.NewFloat64(tableName, "position_z")

	_universeSystemPosition.fillFieldMap()

	return _universeSystemPosition
}

type universeSystemPosition struct {
	universeSystemPositionDo universeSystemPositionDo

	ALL       field.Asterisk
	ID        field.Int32
	PositionX field.Float64
	PositionY field.Float64
	PositionZ field.Float64

	fieldMap map[string]field.Expr
}

func (u universeSystemPosition) Table(newTableName string) *universeSystemPosition {
	u.universeSystemPositionDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u universeSystemPosition) As(alias string) *universeSystemPosition {
	u.universeSystemPositionDo.DO = *(u.universeSystemPositionDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *universeSystemPosition) updateTableName(table string) *universeSystemPosition {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.PositionX = field.NewFloat64(table, "position_x")
	u.PositionY = field.NewFloat64(table, "position_y")
	u.PositionZ = field.NewFloat64(table, "position_z")

	u.fillFieldMap()

	return u
}

func (u *universeSystemPosition) WithContext(ctx context.Context) *universeSystemPositionDo {
	return u.universeSystemPositionDo.WithContext(ctx)
}

func (u universeSystemPosition) TableName() string { return u.universeSystemPositionDo.TableName() }

func (u universeSystemPosition) Alias() string { return u.universeSystemPositionDo.Alias() }

func (u universeSystemPosition) Columns(cols ...field.Expr) gen.Columns {
	return u.universeSystemPositionDo.Columns(cols...)
}

func (u *universeSystemPosition) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *universeSystemPosition) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 4)
	u.fieldMap["id"] = u.ID
	u.fieldMap["position_x"] = u.PositionX
	u.fieldMap["position_y"] = u.PositionY
	u.fieldMap["position_z"] = u.PositionZ
}

func (u universeSystemPosition) clone(db *gorm.DB) universeSystemPosition {
	u.universeSystemPositionDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u universeSystemPosition) replaceDB(db *gorm.DB) universeSystemPosition {
	u.universeSystemPositionDo.ReplaceDB(db)
	return u
}

type universeSystemPositionDo struct{ gen.DO }

func (u universeSystemPositionDo) Debug() *universeSystemPositionDo {
	return u.withDO(u.DO.Debug())
}

func (u universeSystemPositionDo) WithContext(ctx context.Context) *universeSystemPositionDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u universeSystemPositionDo) ReadDB() *universeSystemPositionDo {
	return u.Clauses(dbresolver.Read)
}

func (u universeSystemPositionDo) WriteDB() *universeSystemPositionDo {
	return u.Clauses(dbresolver.Write)
}

func (u universeSystemPositionDo) Session(config *gorm.Session) *universeSystemPositionDo {
	return u.withDO(u.DO.Session(config))
}

func (u universeSystemPositionDo) Clauses(conds ...clause.Expression) *universeSystemPositionDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u universeSystemPositionDo) Returning(value interface{}, columns ...string) *universeSystemPositionDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u universeSystemPositionDo) Not(conds ...gen.Condition) *universeSystemPositionDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u universeSystemPositionDo) Or(conds ...gen.Condition) *universeSystemPositionDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u universeSystemPositionDo) Select(conds ...field.Expr) *universeSystemPositionDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u universeSystemPositionDo) Where(conds ...gen.Condition) *universeSystemPositionDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u universeSystemPositionDo) Order(conds ...field.Expr) *universeSystemPositionDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u universeSystemPositionDo) Distinct(cols ...field.Expr) *universeSystemPositionDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u universeSystemPositionDo) Omit(cols ...field.Expr) *universeSystemPositionDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u universeSystemPositionDo) Join(table schema.Tabler, on ...field.Expr) *universeSystemPositionDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u universeSystemPositionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *universeSystemPositionDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u universeSystemPositionDo) RightJoin(table schema.Tabler, on ...field.Expr) *universeSystemPositionDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u universeSystemPositionDo) Group(cols ...field.Expr) *universeSystemPositionDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u universeSystemPositionDo) Having(conds ...gen.Condition) *universeSystemPositionDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u universeSystemPositionDo) Limit(limit int) *universeSystemPositionDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u universeSystemPositionDo) Offset(offset int) *universeSystemPositionDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u universeSystemPositionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *universeSystemPositionDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u universeSystemPositionDo) Unscoped() *universeSystemPositionDo {
	return u.withDO(u.DO.Unscoped())
}

func (u universeSystemPositionDo) Create(values ...*model.UniverseSystemPosition) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u universeSystemPositionDo) CreateInBatches(values []*model.UniverseSystemPosition, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u universeSystemPositionDo) Save(values ...*model.UniverseSystemPosition) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u universeSystemPositionDo) First() (*model.UniverseSystemPosition, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseSystemPosition), nil
	}
}

func (u universeSystemPositionDo) Take() (*model.UniverseSystemPosition, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseSystemPosition), nil
	}
}

func (u universeSystemPositionDo) Last() (*model.UniverseSystemPosition, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseSystemPosition), nil
	}
}

func (u universeSystemPositionDo) Find() ([]*model.UniverseSystemPosition, error) {
	result, err := u.DO.Find()
	return result.([]*model.UniverseSystemPosition), err
}

func (u universeSystemPositionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UniverseSystemPosition, err error) {
	buf := make([]*model.UniverseSystemPosition, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u universeSystemPositionDo) FindInBatches(result *[]*model.UniverseSystemPosition, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u universeSystemPositionDo) Attrs(attrs ...field.AssignExpr) *universeSystemPositionDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u universeSystemPositionDo) Assign(attrs ...field.AssignExpr) *universeSystemPositionDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u universeSystemPositionDo) Joins(fields ...field.RelationField) *universeSystemPositionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u universeSystemPositionDo) Preload(fields ...field.RelationField) *universeSystemPositionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u universeSystemPositionDo) FirstOrInit() (*model.UniverseSystemPosition, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseSystemPosition), nil
	}
}

func (u universeSystemPositionDo) FirstOrCreate() (*model.UniverseSystemPosition, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseSystemPosition), nil
	}
}

func (u universeSystemPositionDo) FindByPage(offset int, limit int) (result []*model.UniverseSystemPosition, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u universeSystemPositionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u universeSystemPositionDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u universeSystemPositionDo) Delete(models ...*model.UniverseSystemPosition) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *universeSystemPositionDo) withDO(do gen.Dao) *universeSystemPositionDo {
	u.DO = *do.(*gen.DO)
	return u
}
