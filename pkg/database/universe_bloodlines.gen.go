// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/buckbrady/evebot-tools-backend/pkg/model"
)

func newUniverseBloodline(db *gorm.DB, opts ...gen.DOOption) universeBloodline {
	_universeBloodline := universeBloodline{}

	_universeBloodline.universeBloodlineDo.UseDB(db, opts...)
	_universeBloodline.universeBloodlineDo.UseModel(&model.UniverseBloodline{})

	tableName := _universeBloodline.universeBloodlineDo.TableName()
	_universeBloodline.ALL = field.NewAsterisk(tableName)
	_universeBloodline.ID = field.NewInt32(tableName, "id")
	_universeBloodline.CorporationID = field.NewInt32(tableName, "corporation_id")
	_universeBloodline.Description = field.NewString(tableName, "description")
	_universeBloodline.RaceID = field.NewInt32(tableName, "race_id")
	_universeBloodline.ShipTypeID = field.NewInt32(tableName, "ship_type_id")
	_universeBloodline.Charisma = field.NewInt32(tableName, "charisma")
	_universeBloodline.Intelligence = field.NewInt32(tableName, "intelligence")
	_universeBloodline.Memory = field.NewInt32(tableName, "memory")
	_universeBloodline.Perception = field.NewInt32(tableName, "perception")
	_universeBloodline.Willpower = field.NewInt32(tableName, "willpower")
	_universeBloodline.Name = field.NewString(tableName, "name")

	_universeBloodline.fillFieldMap()

	return _universeBloodline
}

type universeBloodline struct {
	universeBloodlineDo universeBloodlineDo

	ALL           field.Asterisk
	ID            field.Int32
	CorporationID field.Int32
	Description   field.String
	RaceID        field.Int32
	ShipTypeID    field.Int32
	Charisma      field.Int32
	Intelligence  field.Int32
	Memory        field.Int32
	Perception    field.Int32
	Willpower     field.Int32
	Name          field.String

	fieldMap map[string]field.Expr
}

func (u universeBloodline) Table(newTableName string) *universeBloodline {
	u.universeBloodlineDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u universeBloodline) As(alias string) *universeBloodline {
	u.universeBloodlineDo.DO = *(u.universeBloodlineDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *universeBloodline) updateTableName(table string) *universeBloodline {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.CorporationID = field.NewInt32(table, "corporation_id")
	u.Description = field.NewString(table, "description")
	u.RaceID = field.NewInt32(table, "race_id")
	u.ShipTypeID = field.NewInt32(table, "ship_type_id")
	u.Charisma = field.NewInt32(table, "charisma")
	u.Intelligence = field.NewInt32(table, "intelligence")
	u.Memory = field.NewInt32(table, "memory")
	u.Perception = field.NewInt32(table, "perception")
	u.Willpower = field.NewInt32(table, "willpower")
	u.Name = field.NewString(table, "name")

	u.fillFieldMap()

	return u
}

func (u *universeBloodline) WithContext(ctx context.Context) *universeBloodlineDo {
	return u.universeBloodlineDo.WithContext(ctx)
}

func (u universeBloodline) TableName() string { return u.universeBloodlineDo.TableName() }

func (u universeBloodline) Alias() string { return u.universeBloodlineDo.Alias() }

func (u universeBloodline) Columns(cols ...field.Expr) gen.Columns {
	return u.universeBloodlineDo.Columns(cols...)
}

func (u *universeBloodline) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *universeBloodline) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 11)
	u.fieldMap["id"] = u.ID
	u.fieldMap["corporation_id"] = u.CorporationID
	u.fieldMap["description"] = u.Description
	u.fieldMap["race_id"] = u.RaceID
	u.fieldMap["ship_type_id"] = u.ShipTypeID
	u.fieldMap["charisma"] = u.Charisma
	u.fieldMap["intelligence"] = u.Intelligence
	u.fieldMap["memory"] = u.Memory
	u.fieldMap["perception"] = u.Perception
	u.fieldMap["willpower"] = u.Willpower
	u.fieldMap["name"] = u.Name
}

func (u universeBloodline) clone(db *gorm.DB) universeBloodline {
	u.universeBloodlineDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u universeBloodline) replaceDB(db *gorm.DB) universeBloodline {
	u.universeBloodlineDo.ReplaceDB(db)
	return u
}

type universeBloodlineDo struct{ gen.DO }

func (u universeBloodlineDo) Debug() *universeBloodlineDo {
	return u.withDO(u.DO.Debug())
}

func (u universeBloodlineDo) WithContext(ctx context.Context) *universeBloodlineDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u universeBloodlineDo) ReadDB() *universeBloodlineDo {
	return u.Clauses(dbresolver.Read)
}

func (u universeBloodlineDo) WriteDB() *universeBloodlineDo {
	return u.Clauses(dbresolver.Write)
}

func (u universeBloodlineDo) Session(config *gorm.Session) *universeBloodlineDo {
	return u.withDO(u.DO.Session(config))
}

func (u universeBloodlineDo) Clauses(conds ...clause.Expression) *universeBloodlineDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u universeBloodlineDo) Returning(value interface{}, columns ...string) *universeBloodlineDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u universeBloodlineDo) Not(conds ...gen.Condition) *universeBloodlineDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u universeBloodlineDo) Or(conds ...gen.Condition) *universeBloodlineDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u universeBloodlineDo) Select(conds ...field.Expr) *universeBloodlineDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u universeBloodlineDo) Where(conds ...gen.Condition) *universeBloodlineDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u universeBloodlineDo) Order(conds ...field.Expr) *universeBloodlineDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u universeBloodlineDo) Distinct(cols ...field.Expr) *universeBloodlineDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u universeBloodlineDo) Omit(cols ...field.Expr) *universeBloodlineDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u universeBloodlineDo) Join(table schema.Tabler, on ...field.Expr) *universeBloodlineDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u universeBloodlineDo) LeftJoin(table schema.Tabler, on ...field.Expr) *universeBloodlineDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u universeBloodlineDo) RightJoin(table schema.Tabler, on ...field.Expr) *universeBloodlineDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u universeBloodlineDo) Group(cols ...field.Expr) *universeBloodlineDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u universeBloodlineDo) Having(conds ...gen.Condition) *universeBloodlineDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u universeBloodlineDo) Limit(limit int) *universeBloodlineDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u universeBloodlineDo) Offset(offset int) *universeBloodlineDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u universeBloodlineDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *universeBloodlineDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u universeBloodlineDo) Unscoped() *universeBloodlineDo {
	return u.withDO(u.DO.Unscoped())
}

func (u universeBloodlineDo) Create(values ...*model.UniverseBloodline) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u universeBloodlineDo) CreateInBatches(values []*model.UniverseBloodline, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u universeBloodlineDo) Save(values ...*model.UniverseBloodline) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u universeBloodlineDo) First() (*model.UniverseBloodline, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseBloodline), nil
	}
}

func (u universeBloodlineDo) Take() (*model.UniverseBloodline, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseBloodline), nil
	}
}

func (u universeBloodlineDo) Last() (*model.UniverseBloodline, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseBloodline), nil
	}
}

func (u universeBloodlineDo) Find() ([]*model.UniverseBloodline, error) {
	result, err := u.DO.Find()
	return result.([]*model.UniverseBloodline), err
}

func (u universeBloodlineDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UniverseBloodline, err error) {
	buf := make([]*model.UniverseBloodline, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u universeBloodlineDo) FindInBatches(result *[]*model.UniverseBloodline, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u universeBloodlineDo) Attrs(attrs ...field.AssignExpr) *universeBloodlineDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u universeBloodlineDo) Assign(attrs ...field.AssignExpr) *universeBloodlineDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u universeBloodlineDo) Joins(fields ...field.RelationField) *universeBloodlineDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u universeBloodlineDo) Preload(fields ...field.RelationField) *universeBloodlineDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u universeBloodlineDo) FirstOrInit() (*model.UniverseBloodline, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseBloodline), nil
	}
}

func (u universeBloodlineDo) FirstOrCreate() (*model.UniverseBloodline, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseBloodline), nil
	}
}

func (u universeBloodlineDo) FindByPage(offset int, limit int) (result []*model.UniverseBloodline, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u universeBloodlineDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u universeBloodlineDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u universeBloodlineDo) Delete(models ...*model.UniverseBloodline) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *universeBloodlineDo) withDO(do gen.Dao) *universeBloodlineDo {
	u.DO = *do.(*gen.DO)
	return u
}
