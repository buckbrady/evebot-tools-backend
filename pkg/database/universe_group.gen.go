// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/buckbrady/evebot-tools-backend/pkg/model"
)

func newUniverseGroup(db *gorm.DB, opts ...gen.DOOption) universeGroup {
	_universeGroup := universeGroup{}

	_universeGroup.universeGroupDo.UseDB(db, opts...)
	_universeGroup.universeGroupDo.UseModel(&model.UniverseGroup{})

	tableName := _universeGroup.universeGroupDo.TableName()
	_universeGroup.ALL = field.NewAsterisk(tableName)
	_universeGroup.ID = field.NewInt32(tableName, "id")
	_universeGroup.CategoryID = field.NewInt32(tableName, "category_id")
	_universeGroup.Name = field.NewString(tableName, "name")
	_universeGroup.Published = field.NewBool(tableName, "published")

	_universeGroup.fillFieldMap()

	return _universeGroup
}

type universeGroup struct {
	universeGroupDo universeGroupDo

	ALL        field.Asterisk
	ID         field.Int32
	CategoryID field.Int32
	Name       field.String
	Published  field.Bool

	fieldMap map[string]field.Expr
}

func (u universeGroup) Table(newTableName string) *universeGroup {
	u.universeGroupDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u universeGroup) As(alias string) *universeGroup {
	u.universeGroupDo.DO = *(u.universeGroupDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *universeGroup) updateTableName(table string) *universeGroup {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.CategoryID = field.NewInt32(table, "category_id")
	u.Name = field.NewString(table, "name")
	u.Published = field.NewBool(table, "published")

	u.fillFieldMap()

	return u
}

func (u *universeGroup) WithContext(ctx context.Context) *universeGroupDo {
	return u.universeGroupDo.WithContext(ctx)
}

func (u universeGroup) TableName() string { return u.universeGroupDo.TableName() }

func (u universeGroup) Alias() string { return u.universeGroupDo.Alias() }

func (u universeGroup) Columns(cols ...field.Expr) gen.Columns {
	return u.universeGroupDo.Columns(cols...)
}

func (u *universeGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *universeGroup) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 4)
	u.fieldMap["id"] = u.ID
	u.fieldMap["category_id"] = u.CategoryID
	u.fieldMap["name"] = u.Name
	u.fieldMap["published"] = u.Published
}

func (u universeGroup) clone(db *gorm.DB) universeGroup {
	u.universeGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u universeGroup) replaceDB(db *gorm.DB) universeGroup {
	u.universeGroupDo.ReplaceDB(db)
	return u
}

type universeGroupDo struct{ gen.DO }

func (u universeGroupDo) Debug() *universeGroupDo {
	return u.withDO(u.DO.Debug())
}

func (u universeGroupDo) WithContext(ctx context.Context) *universeGroupDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u universeGroupDo) ReadDB() *universeGroupDo {
	return u.Clauses(dbresolver.Read)
}

func (u universeGroupDo) WriteDB() *universeGroupDo {
	return u.Clauses(dbresolver.Write)
}

func (u universeGroupDo) Session(config *gorm.Session) *universeGroupDo {
	return u.withDO(u.DO.Session(config))
}

func (u universeGroupDo) Clauses(conds ...clause.Expression) *universeGroupDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u universeGroupDo) Returning(value interface{}, columns ...string) *universeGroupDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u universeGroupDo) Not(conds ...gen.Condition) *universeGroupDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u universeGroupDo) Or(conds ...gen.Condition) *universeGroupDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u universeGroupDo) Select(conds ...field.Expr) *universeGroupDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u universeGroupDo) Where(conds ...gen.Condition) *universeGroupDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u universeGroupDo) Order(conds ...field.Expr) *universeGroupDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u universeGroupDo) Distinct(cols ...field.Expr) *universeGroupDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u universeGroupDo) Omit(cols ...field.Expr) *universeGroupDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u universeGroupDo) Join(table schema.Tabler, on ...field.Expr) *universeGroupDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u universeGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) *universeGroupDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u universeGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) *universeGroupDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u universeGroupDo) Group(cols ...field.Expr) *universeGroupDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u universeGroupDo) Having(conds ...gen.Condition) *universeGroupDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u universeGroupDo) Limit(limit int) *universeGroupDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u universeGroupDo) Offset(offset int) *universeGroupDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u universeGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *universeGroupDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u universeGroupDo) Unscoped() *universeGroupDo {
	return u.withDO(u.DO.Unscoped())
}

func (u universeGroupDo) Create(values ...*model.UniverseGroup) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u universeGroupDo) CreateInBatches(values []*model.UniverseGroup, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u universeGroupDo) Save(values ...*model.UniverseGroup) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u universeGroupDo) First() (*model.UniverseGroup, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseGroup), nil
	}
}

func (u universeGroupDo) Take() (*model.UniverseGroup, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseGroup), nil
	}
}

func (u universeGroupDo) Last() (*model.UniverseGroup, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseGroup), nil
	}
}

func (u universeGroupDo) Find() ([]*model.UniverseGroup, error) {
	result, err := u.DO.Find()
	return result.([]*model.UniverseGroup), err
}

func (u universeGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UniverseGroup, err error) {
	buf := make([]*model.UniverseGroup, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u universeGroupDo) FindInBatches(result *[]*model.UniverseGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u universeGroupDo) Attrs(attrs ...field.AssignExpr) *universeGroupDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u universeGroupDo) Assign(attrs ...field.AssignExpr) *universeGroupDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u universeGroupDo) Joins(fields ...field.RelationField) *universeGroupDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u universeGroupDo) Preload(fields ...field.RelationField) *universeGroupDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u universeGroupDo) FirstOrInit() (*model.UniverseGroup, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseGroup), nil
	}
}

func (u universeGroupDo) FirstOrCreate() (*model.UniverseGroup, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseGroup), nil
	}
}

func (u universeGroupDo) FindByPage(offset int, limit int) (result []*model.UniverseGroup, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u universeGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u universeGroupDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u universeGroupDo) Delete(models ...*model.UniverseGroup) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *universeGroupDo) withDO(do gen.Dao) *universeGroupDo {
	u.DO = *do.(*gen.DO)
	return u
}
