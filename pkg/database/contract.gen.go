// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/buckbrady/evebot-tools-backend/pkg/model"
)

func newContract(db *gorm.DB, opts ...gen.DOOption) contract {
	_contract := contract{}

	_contract.contractDo.UseDB(db, opts...)
	_contract.contractDo.UseModel(&model.Contract{})

	tableName := _contract.contractDo.TableName()
	_contract.ALL = field.NewAsterisk(tableName)
	_contract.ID = field.NewInt64(tableName, "id")
	_contract.Buyout = field.NewFloat64(tableName, "buyout")
	_contract.Collateral = field.NewFloat64(tableName, "collateral")
	_contract.DateCompleted = field.NewTime(tableName, "date_completed")
	_contract.DateExpired = field.NewTime(tableName, "date_expired")
	_contract.DateIssued = field.NewTime(tableName, "date_issued")
	_contract.DaysToComplete = field.NewInt32(tableName, "days_to_complete")
	_contract.EndLocationID = field.NewInt64(tableName, "end_location_id")
	_contract.ForCorporation = field.NewBool(tableName, "for_corporation")
	_contract.IssuerCorporationID = field.NewInt32(tableName, "issuer_corporation_id")
	_contract.IssuerID = field.NewInt32(tableName, "issuer_id")
	_contract.Price = field.NewFloat64(tableName, "price")
	_contract.Reward = field.NewFloat64(tableName, "reward")
	_contract.StartLocationID = field.NewInt64(tableName, "start_location_id")
	_contract.Status = field.NewString(tableName, "status")
	_contract.Title = field.NewString(tableName, "title")
	_contract.Type = field.NewString(tableName, "type")
	_contract.Volume = field.NewFloat64(tableName, "volume")

	_contract.fillFieldMap()

	return _contract
}

type contract struct {
	contractDo contractDo

	ALL                 field.Asterisk
	ID                  field.Int64
	Buyout              field.Float64
	Collateral          field.Float64
	DateCompleted       field.Time
	DateExpired         field.Time
	DateIssued          field.Time
	DaysToComplete      field.Int32
	EndLocationID       field.Int64
	ForCorporation      field.Bool
	IssuerCorporationID field.Int32
	IssuerID            field.Int32
	Price               field.Float64
	Reward              field.Float64
	StartLocationID     field.Int64
	Status              field.String
	Title               field.String
	Type                field.String
	Volume              field.Float64

	fieldMap map[string]field.Expr
}

func (c contract) Table(newTableName string) *contract {
	c.contractDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c contract) As(alias string) *contract {
	c.contractDo.DO = *(c.contractDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *contract) updateTableName(table string) *contract {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Buyout = field.NewFloat64(table, "buyout")
	c.Collateral = field.NewFloat64(table, "collateral")
	c.DateCompleted = field.NewTime(table, "date_completed")
	c.DateExpired = field.NewTime(table, "date_expired")
	c.DateIssued = field.NewTime(table, "date_issued")
	c.DaysToComplete = field.NewInt32(table, "days_to_complete")
	c.EndLocationID = field.NewInt64(table, "end_location_id")
	c.ForCorporation = field.NewBool(table, "for_corporation")
	c.IssuerCorporationID = field.NewInt32(table, "issuer_corporation_id")
	c.IssuerID = field.NewInt32(table, "issuer_id")
	c.Price = field.NewFloat64(table, "price")
	c.Reward = field.NewFloat64(table, "reward")
	c.StartLocationID = field.NewInt64(table, "start_location_id")
	c.Status = field.NewString(table, "status")
	c.Title = field.NewString(table, "title")
	c.Type = field.NewString(table, "type")
	c.Volume = field.NewFloat64(table, "volume")

	c.fillFieldMap()

	return c
}

func (c *contract) WithContext(ctx context.Context) *contractDo { return c.contractDo.WithContext(ctx) }

func (c contract) TableName() string { return c.contractDo.TableName() }

func (c contract) Alias() string { return c.contractDo.Alias() }

func (c contract) Columns(cols ...field.Expr) gen.Columns { return c.contractDo.Columns(cols...) }

func (c *contract) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *contract) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 18)
	c.fieldMap["id"] = c.ID
	c.fieldMap["buyout"] = c.Buyout
	c.fieldMap["collateral"] = c.Collateral
	c.fieldMap["date_completed"] = c.DateCompleted
	c.fieldMap["date_expired"] = c.DateExpired
	c.fieldMap["date_issued"] = c.DateIssued
	c.fieldMap["days_to_complete"] = c.DaysToComplete
	c.fieldMap["end_location_id"] = c.EndLocationID
	c.fieldMap["for_corporation"] = c.ForCorporation
	c.fieldMap["issuer_corporation_id"] = c.IssuerCorporationID
	c.fieldMap["issuer_id"] = c.IssuerID
	c.fieldMap["price"] = c.Price
	c.fieldMap["reward"] = c.Reward
	c.fieldMap["start_location_id"] = c.StartLocationID
	c.fieldMap["status"] = c.Status
	c.fieldMap["title"] = c.Title
	c.fieldMap["type"] = c.Type
	c.fieldMap["volume"] = c.Volume
}

func (c contract) clone(db *gorm.DB) contract {
	c.contractDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c contract) replaceDB(db *gorm.DB) contract {
	c.contractDo.ReplaceDB(db)
	return c
}

type contractDo struct{ gen.DO }

func (c contractDo) Debug() *contractDo {
	return c.withDO(c.DO.Debug())
}

func (c contractDo) WithContext(ctx context.Context) *contractDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c contractDo) ReadDB() *contractDo {
	return c.Clauses(dbresolver.Read)
}

func (c contractDo) WriteDB() *contractDo {
	return c.Clauses(dbresolver.Write)
}

func (c contractDo) Session(config *gorm.Session) *contractDo {
	return c.withDO(c.DO.Session(config))
}

func (c contractDo) Clauses(conds ...clause.Expression) *contractDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c contractDo) Returning(value interface{}, columns ...string) *contractDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c contractDo) Not(conds ...gen.Condition) *contractDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c contractDo) Or(conds ...gen.Condition) *contractDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c contractDo) Select(conds ...field.Expr) *contractDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c contractDo) Where(conds ...gen.Condition) *contractDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c contractDo) Order(conds ...field.Expr) *contractDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c contractDo) Distinct(cols ...field.Expr) *contractDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c contractDo) Omit(cols ...field.Expr) *contractDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c contractDo) Join(table schema.Tabler, on ...field.Expr) *contractDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c contractDo) LeftJoin(table schema.Tabler, on ...field.Expr) *contractDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c contractDo) RightJoin(table schema.Tabler, on ...field.Expr) *contractDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c contractDo) Group(cols ...field.Expr) *contractDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c contractDo) Having(conds ...gen.Condition) *contractDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c contractDo) Limit(limit int) *contractDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c contractDo) Offset(offset int) *contractDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c contractDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *contractDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c contractDo) Unscoped() *contractDo {
	return c.withDO(c.DO.Unscoped())
}

func (c contractDo) Create(values ...*model.Contract) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c contractDo) CreateInBatches(values []*model.Contract, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c contractDo) Save(values ...*model.Contract) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c contractDo) First() (*model.Contract, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Contract), nil
	}
}

func (c contractDo) Take() (*model.Contract, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Contract), nil
	}
}

func (c contractDo) Last() (*model.Contract, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Contract), nil
	}
}

func (c contractDo) Find() ([]*model.Contract, error) {
	result, err := c.DO.Find()
	return result.([]*model.Contract), err
}

func (c contractDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Contract, err error) {
	buf := make([]*model.Contract, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c contractDo) FindInBatches(result *[]*model.Contract, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c contractDo) Attrs(attrs ...field.AssignExpr) *contractDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c contractDo) Assign(attrs ...field.AssignExpr) *contractDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c contractDo) Joins(fields ...field.RelationField) *contractDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c contractDo) Preload(fields ...field.RelationField) *contractDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c contractDo) FirstOrInit() (*model.Contract, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Contract), nil
	}
}

func (c contractDo) FirstOrCreate() (*model.Contract, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Contract), nil
	}
}

func (c contractDo) FindByPage(offset int, limit int) (result []*model.Contract, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c contractDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c contractDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c contractDo) Delete(models ...*model.Contract) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *contractDo) withDO(do gen.Dao) *contractDo {
	c.DO = *do.(*gen.DO)
	return c
}
