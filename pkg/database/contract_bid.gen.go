// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/buckbrady/evebot-tools-backend/pkg/model"
)

func newContractBid(db *gorm.DB, opts ...gen.DOOption) contractBid {
	_contractBid := contractBid{}

	_contractBid.contractBidDo.UseDB(db, opts...)
	_contractBid.contractBidDo.UseModel(&model.ContractBid{})

	tableName := _contractBid.contractBidDo.TableName()
	_contractBid.ALL = field.NewAsterisk(tableName)
	_contractBid.ID = field.NewInt64(tableName, "id")
	_contractBid.Amount = field.NewFloat64(tableName, "amount")
	_contractBid.BidID = field.NewInt32(tableName, "bid_id")
	_contractBid.DateBid = field.NewTime(tableName, "date_bid")

	_contractBid.fillFieldMap()

	return _contractBid
}

type contractBid struct {
	contractBidDo contractBidDo

	ALL     field.Asterisk
	ID      field.Int64
	Amount  field.Float64
	BidID   field.Int32
	DateBid field.Time

	fieldMap map[string]field.Expr
}

func (c contractBid) Table(newTableName string) *contractBid {
	c.contractBidDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c contractBid) As(alias string) *contractBid {
	c.contractBidDo.DO = *(c.contractBidDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *contractBid) updateTableName(table string) *contractBid {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Amount = field.NewFloat64(table, "amount")
	c.BidID = field.NewInt32(table, "bid_id")
	c.DateBid = field.NewTime(table, "date_bid")

	c.fillFieldMap()

	return c
}

func (c *contractBid) WithContext(ctx context.Context) *contractBidDo {
	return c.contractBidDo.WithContext(ctx)
}

func (c contractBid) TableName() string { return c.contractBidDo.TableName() }

func (c contractBid) Alias() string { return c.contractBidDo.Alias() }

func (c contractBid) Columns(cols ...field.Expr) gen.Columns { return c.contractBidDo.Columns(cols...) }

func (c *contractBid) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *contractBid) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 4)
	c.fieldMap["id"] = c.ID
	c.fieldMap["amount"] = c.Amount
	c.fieldMap["bid_id"] = c.BidID
	c.fieldMap["date_bid"] = c.DateBid
}

func (c contractBid) clone(db *gorm.DB) contractBid {
	c.contractBidDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c contractBid) replaceDB(db *gorm.DB) contractBid {
	c.contractBidDo.ReplaceDB(db)
	return c
}

type contractBidDo struct{ gen.DO }

func (c contractBidDo) Debug() *contractBidDo {
	return c.withDO(c.DO.Debug())
}

func (c contractBidDo) WithContext(ctx context.Context) *contractBidDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c contractBidDo) ReadDB() *contractBidDo {
	return c.Clauses(dbresolver.Read)
}

func (c contractBidDo) WriteDB() *contractBidDo {
	return c.Clauses(dbresolver.Write)
}

func (c contractBidDo) Session(config *gorm.Session) *contractBidDo {
	return c.withDO(c.DO.Session(config))
}

func (c contractBidDo) Clauses(conds ...clause.Expression) *contractBidDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c contractBidDo) Returning(value interface{}, columns ...string) *contractBidDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c contractBidDo) Not(conds ...gen.Condition) *contractBidDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c contractBidDo) Or(conds ...gen.Condition) *contractBidDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c contractBidDo) Select(conds ...field.Expr) *contractBidDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c contractBidDo) Where(conds ...gen.Condition) *contractBidDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c contractBidDo) Order(conds ...field.Expr) *contractBidDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c contractBidDo) Distinct(cols ...field.Expr) *contractBidDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c contractBidDo) Omit(cols ...field.Expr) *contractBidDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c contractBidDo) Join(table schema.Tabler, on ...field.Expr) *contractBidDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c contractBidDo) LeftJoin(table schema.Tabler, on ...field.Expr) *contractBidDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c contractBidDo) RightJoin(table schema.Tabler, on ...field.Expr) *contractBidDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c contractBidDo) Group(cols ...field.Expr) *contractBidDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c contractBidDo) Having(conds ...gen.Condition) *contractBidDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c contractBidDo) Limit(limit int) *contractBidDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c contractBidDo) Offset(offset int) *contractBidDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c contractBidDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *contractBidDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c contractBidDo) Unscoped() *contractBidDo {
	return c.withDO(c.DO.Unscoped())
}

func (c contractBidDo) Create(values ...*model.ContractBid) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c contractBidDo) CreateInBatches(values []*model.ContractBid, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c contractBidDo) Save(values ...*model.ContractBid) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c contractBidDo) First() (*model.ContractBid, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContractBid), nil
	}
}

func (c contractBidDo) Take() (*model.ContractBid, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContractBid), nil
	}
}

func (c contractBidDo) Last() (*model.ContractBid, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContractBid), nil
	}
}

func (c contractBidDo) Find() ([]*model.ContractBid, error) {
	result, err := c.DO.Find()
	return result.([]*model.ContractBid), err
}

func (c contractBidDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ContractBid, err error) {
	buf := make([]*model.ContractBid, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c contractBidDo) FindInBatches(result *[]*model.ContractBid, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c contractBidDo) Attrs(attrs ...field.AssignExpr) *contractBidDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c contractBidDo) Assign(attrs ...field.AssignExpr) *contractBidDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c contractBidDo) Joins(fields ...field.RelationField) *contractBidDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c contractBidDo) Preload(fields ...field.RelationField) *contractBidDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c contractBidDo) FirstOrInit() (*model.ContractBid, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContractBid), nil
	}
}

func (c contractBidDo) FirstOrCreate() (*model.ContractBid, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContractBid), nil
	}
}

func (c contractBidDo) FindByPage(offset int, limit int) (result []*model.ContractBid, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c contractBidDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c contractBidDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c contractBidDo) Delete(models ...*model.ContractBid) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *contractBidDo) withDO(do gen.Dao) *contractBidDo {
	c.DO = *do.(*gen.DO)
	return c
}
