// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/buckbrady/evebot-tools-backend/pkg/model"
)

func newUniverseRace(db *gorm.DB, opts ...gen.DOOption) universeRace {
	_universeRace := universeRace{}

	_universeRace.universeRaceDo.UseDB(db, opts...)
	_universeRace.universeRaceDo.UseModel(&model.UniverseRace{})

	tableName := _universeRace.universeRaceDo.TableName()
	_universeRace.ALL = field.NewAsterisk(tableName)
	_universeRace.ID = field.NewInt32(tableName, "id")
	_universeRace.AllianceID = field.NewInt32(tableName, "alliance_id")
	_universeRace.Description = field.NewString(tableName, "description")
	_universeRace.Name = field.NewString(tableName, "name")

	_universeRace.fillFieldMap()

	return _universeRace
}

type universeRace struct {
	universeRaceDo universeRaceDo

	ALL         field.Asterisk
	ID          field.Int32
	AllianceID  field.Int32
	Description field.String
	Name        field.String

	fieldMap map[string]field.Expr
}

func (u universeRace) Table(newTableName string) *universeRace {
	u.universeRaceDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u universeRace) As(alias string) *universeRace {
	u.universeRaceDo.DO = *(u.universeRaceDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *universeRace) updateTableName(table string) *universeRace {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.AllianceID = field.NewInt32(table, "alliance_id")
	u.Description = field.NewString(table, "description")
	u.Name = field.NewString(table, "name")

	u.fillFieldMap()

	return u
}

func (u *universeRace) WithContext(ctx context.Context) *universeRaceDo {
	return u.universeRaceDo.WithContext(ctx)
}

func (u universeRace) TableName() string { return u.universeRaceDo.TableName() }

func (u universeRace) Alias() string { return u.universeRaceDo.Alias() }

func (u universeRace) Columns(cols ...field.Expr) gen.Columns {
	return u.universeRaceDo.Columns(cols...)
}

func (u *universeRace) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *universeRace) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 4)
	u.fieldMap["id"] = u.ID
	u.fieldMap["alliance_id"] = u.AllianceID
	u.fieldMap["description"] = u.Description
	u.fieldMap["name"] = u.Name
}

func (u universeRace) clone(db *gorm.DB) universeRace {
	u.universeRaceDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u universeRace) replaceDB(db *gorm.DB) universeRace {
	u.universeRaceDo.ReplaceDB(db)
	return u
}

type universeRaceDo struct{ gen.DO }

func (u universeRaceDo) Debug() *universeRaceDo {
	return u.withDO(u.DO.Debug())
}

func (u universeRaceDo) WithContext(ctx context.Context) *universeRaceDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u universeRaceDo) ReadDB() *universeRaceDo {
	return u.Clauses(dbresolver.Read)
}

func (u universeRaceDo) WriteDB() *universeRaceDo {
	return u.Clauses(dbresolver.Write)
}

func (u universeRaceDo) Session(config *gorm.Session) *universeRaceDo {
	return u.withDO(u.DO.Session(config))
}

func (u universeRaceDo) Clauses(conds ...clause.Expression) *universeRaceDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u universeRaceDo) Returning(value interface{}, columns ...string) *universeRaceDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u universeRaceDo) Not(conds ...gen.Condition) *universeRaceDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u universeRaceDo) Or(conds ...gen.Condition) *universeRaceDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u universeRaceDo) Select(conds ...field.Expr) *universeRaceDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u universeRaceDo) Where(conds ...gen.Condition) *universeRaceDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u universeRaceDo) Order(conds ...field.Expr) *universeRaceDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u universeRaceDo) Distinct(cols ...field.Expr) *universeRaceDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u universeRaceDo) Omit(cols ...field.Expr) *universeRaceDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u universeRaceDo) Join(table schema.Tabler, on ...field.Expr) *universeRaceDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u universeRaceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *universeRaceDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u universeRaceDo) RightJoin(table schema.Tabler, on ...field.Expr) *universeRaceDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u universeRaceDo) Group(cols ...field.Expr) *universeRaceDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u universeRaceDo) Having(conds ...gen.Condition) *universeRaceDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u universeRaceDo) Limit(limit int) *universeRaceDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u universeRaceDo) Offset(offset int) *universeRaceDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u universeRaceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *universeRaceDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u universeRaceDo) Unscoped() *universeRaceDo {
	return u.withDO(u.DO.Unscoped())
}

func (u universeRaceDo) Create(values ...*model.UniverseRace) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u universeRaceDo) CreateInBatches(values []*model.UniverseRace, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u universeRaceDo) Save(values ...*model.UniverseRace) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u universeRaceDo) First() (*model.UniverseRace, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseRace), nil
	}
}

func (u universeRaceDo) Take() (*model.UniverseRace, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseRace), nil
	}
}

func (u universeRaceDo) Last() (*model.UniverseRace, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseRace), nil
	}
}

func (u universeRaceDo) Find() ([]*model.UniverseRace, error) {
	result, err := u.DO.Find()
	return result.([]*model.UniverseRace), err
}

func (u universeRaceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UniverseRace, err error) {
	buf := make([]*model.UniverseRace, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u universeRaceDo) FindInBatches(result *[]*model.UniverseRace, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u universeRaceDo) Attrs(attrs ...field.AssignExpr) *universeRaceDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u universeRaceDo) Assign(attrs ...field.AssignExpr) *universeRaceDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u universeRaceDo) Joins(fields ...field.RelationField) *universeRaceDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u universeRaceDo) Preload(fields ...field.RelationField) *universeRaceDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u universeRaceDo) FirstOrInit() (*model.UniverseRace, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseRace), nil
	}
}

func (u universeRaceDo) FirstOrCreate() (*model.UniverseRace, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseRace), nil
	}
}

func (u universeRaceDo) FindByPage(offset int, limit int) (result []*model.UniverseRace, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u universeRaceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u universeRaceDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u universeRaceDo) Delete(models ...*model.UniverseRace) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *universeRaceDo) withDO(do gen.Dao) *universeRaceDo {
	u.DO = *do.(*gen.DO)
	return u
}
