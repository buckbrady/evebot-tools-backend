// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/buckbrady/evebot-tools-backend/pkg/model"
)

func newMarketGroup(db *gorm.DB, opts ...gen.DOOption) marketGroup {
	_marketGroup := marketGroup{}

	_marketGroup.marketGroupDo.UseDB(db, opts...)
	_marketGroup.marketGroupDo.UseModel(&model.MarketGroup{})

	tableName := _marketGroup.marketGroupDo.TableName()
	_marketGroup.ALL = field.NewAsterisk(tableName)
	_marketGroup.ID = field.NewInt32(tableName, "id")
	_marketGroup.Name = field.NewString(tableName, "name")
	_marketGroup.Description = field.NewString(tableName, "description")
	_marketGroup.ParentGroupID = field.NewInt32(tableName, "parent_group_id")

	_marketGroup.fillFieldMap()

	return _marketGroup
}

type marketGroup struct {
	marketGroupDo marketGroupDo

	ALL           field.Asterisk
	ID            field.Int32
	Name          field.String
	Description   field.String
	ParentGroupID field.Int32

	fieldMap map[string]field.Expr
}

func (m marketGroup) Table(newTableName string) *marketGroup {
	m.marketGroupDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m marketGroup) As(alias string) *marketGroup {
	m.marketGroupDo.DO = *(m.marketGroupDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *marketGroup) updateTableName(table string) *marketGroup {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.Name = field.NewString(table, "name")
	m.Description = field.NewString(table, "description")
	m.ParentGroupID = field.NewInt32(table, "parent_group_id")

	m.fillFieldMap()

	return m
}

func (m *marketGroup) WithContext(ctx context.Context) *marketGroupDo {
	return m.marketGroupDo.WithContext(ctx)
}

func (m marketGroup) TableName() string { return m.marketGroupDo.TableName() }

func (m marketGroup) Alias() string { return m.marketGroupDo.Alias() }

func (m marketGroup) Columns(cols ...field.Expr) gen.Columns { return m.marketGroupDo.Columns(cols...) }

func (m *marketGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *marketGroup) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 4)
	m.fieldMap["id"] = m.ID
	m.fieldMap["name"] = m.Name
	m.fieldMap["description"] = m.Description
	m.fieldMap["parent_group_id"] = m.ParentGroupID
}

func (m marketGroup) clone(db *gorm.DB) marketGroup {
	m.marketGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m marketGroup) replaceDB(db *gorm.DB) marketGroup {
	m.marketGroupDo.ReplaceDB(db)
	return m
}

type marketGroupDo struct{ gen.DO }

func (m marketGroupDo) Debug() *marketGroupDo {
	return m.withDO(m.DO.Debug())
}

func (m marketGroupDo) WithContext(ctx context.Context) *marketGroupDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m marketGroupDo) ReadDB() *marketGroupDo {
	return m.Clauses(dbresolver.Read)
}

func (m marketGroupDo) WriteDB() *marketGroupDo {
	return m.Clauses(dbresolver.Write)
}

func (m marketGroupDo) Session(config *gorm.Session) *marketGroupDo {
	return m.withDO(m.DO.Session(config))
}

func (m marketGroupDo) Clauses(conds ...clause.Expression) *marketGroupDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m marketGroupDo) Returning(value interface{}, columns ...string) *marketGroupDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m marketGroupDo) Not(conds ...gen.Condition) *marketGroupDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m marketGroupDo) Or(conds ...gen.Condition) *marketGroupDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m marketGroupDo) Select(conds ...field.Expr) *marketGroupDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m marketGroupDo) Where(conds ...gen.Condition) *marketGroupDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m marketGroupDo) Order(conds ...field.Expr) *marketGroupDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m marketGroupDo) Distinct(cols ...field.Expr) *marketGroupDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m marketGroupDo) Omit(cols ...field.Expr) *marketGroupDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m marketGroupDo) Join(table schema.Tabler, on ...field.Expr) *marketGroupDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m marketGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) *marketGroupDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m marketGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) *marketGroupDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m marketGroupDo) Group(cols ...field.Expr) *marketGroupDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m marketGroupDo) Having(conds ...gen.Condition) *marketGroupDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m marketGroupDo) Limit(limit int) *marketGroupDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m marketGroupDo) Offset(offset int) *marketGroupDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m marketGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *marketGroupDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m marketGroupDo) Unscoped() *marketGroupDo {
	return m.withDO(m.DO.Unscoped())
}

func (m marketGroupDo) Create(values ...*model.MarketGroup) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m marketGroupDo) CreateInBatches(values []*model.MarketGroup, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m marketGroupDo) Save(values ...*model.MarketGroup) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m marketGroupDo) First() (*model.MarketGroup, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketGroup), nil
	}
}

func (m marketGroupDo) Take() (*model.MarketGroup, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketGroup), nil
	}
}

func (m marketGroupDo) Last() (*model.MarketGroup, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketGroup), nil
	}
}

func (m marketGroupDo) Find() ([]*model.MarketGroup, error) {
	result, err := m.DO.Find()
	return result.([]*model.MarketGroup), err
}

func (m marketGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MarketGroup, err error) {
	buf := make([]*model.MarketGroup, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m marketGroupDo) FindInBatches(result *[]*model.MarketGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m marketGroupDo) Attrs(attrs ...field.AssignExpr) *marketGroupDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m marketGroupDo) Assign(attrs ...field.AssignExpr) *marketGroupDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m marketGroupDo) Joins(fields ...field.RelationField) *marketGroupDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m marketGroupDo) Preload(fields ...field.RelationField) *marketGroupDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m marketGroupDo) FirstOrInit() (*model.MarketGroup, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketGroup), nil
	}
}

func (m marketGroupDo) FirstOrCreate() (*model.MarketGroup, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketGroup), nil
	}
}

func (m marketGroupDo) FindByPage(offset int, limit int) (result []*model.MarketGroup, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m marketGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m marketGroupDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m marketGroupDo) Delete(models ...*model.MarketGroup) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *marketGroupDo) withDO(do gen.Dao) *marketGroupDo {
	m.DO = *do.(*gen.DO)
	return m
}
