// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/buckbrady/evebot-tools-backend/pkg/model"
)

func newUniverseSystemJump(db *gorm.DB, opts ...gen.DOOption) universeSystemJump {
	_universeSystemJump := universeSystemJump{}

	_universeSystemJump.universeSystemJumpDo.UseDB(db, opts...)
	_universeSystemJump.universeSystemJumpDo.UseModel(&model.UniverseSystemJump{})

	tableName := _universeSystemJump.universeSystemJumpDo.TableName()
	_universeSystemJump.ALL = field.NewAsterisk(tableName)
	_universeSystemJump.SystemID = field.NewInt32(tableName, "system_id")
	_universeSystemJump.Timestamp = field.NewTime(tableName, "timestamp")
	_universeSystemJump.ShipJumps = field.NewInt32(tableName, "ship_jumps")

	_universeSystemJump.fillFieldMap()

	return _universeSystemJump
}

type universeSystemJump struct {
	universeSystemJumpDo universeSystemJumpDo

	ALL       field.Asterisk
	SystemID  field.Int32
	Timestamp field.Time
	ShipJumps field.Int32

	fieldMap map[string]field.Expr
}

func (u universeSystemJump) Table(newTableName string) *universeSystemJump {
	u.universeSystemJumpDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u universeSystemJump) As(alias string) *universeSystemJump {
	u.universeSystemJumpDo.DO = *(u.universeSystemJumpDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *universeSystemJump) updateTableName(table string) *universeSystemJump {
	u.ALL = field.NewAsterisk(table)
	u.SystemID = field.NewInt32(table, "system_id")
	u.Timestamp = field.NewTime(table, "timestamp")
	u.ShipJumps = field.NewInt32(table, "ship_jumps")

	u.fillFieldMap()

	return u
}

func (u *universeSystemJump) WithContext(ctx context.Context) *universeSystemJumpDo {
	return u.universeSystemJumpDo.WithContext(ctx)
}

func (u universeSystemJump) TableName() string { return u.universeSystemJumpDo.TableName() }

func (u universeSystemJump) Alias() string { return u.universeSystemJumpDo.Alias() }

func (u universeSystemJump) Columns(cols ...field.Expr) gen.Columns {
	return u.universeSystemJumpDo.Columns(cols...)
}

func (u *universeSystemJump) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *universeSystemJump) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 3)
	u.fieldMap["system_id"] = u.SystemID
	u.fieldMap["timestamp"] = u.Timestamp
	u.fieldMap["ship_jumps"] = u.ShipJumps
}

func (u universeSystemJump) clone(db *gorm.DB) universeSystemJump {
	u.universeSystemJumpDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u universeSystemJump) replaceDB(db *gorm.DB) universeSystemJump {
	u.universeSystemJumpDo.ReplaceDB(db)
	return u
}

type universeSystemJumpDo struct{ gen.DO }

func (u universeSystemJumpDo) Debug() *universeSystemJumpDo {
	return u.withDO(u.DO.Debug())
}

func (u universeSystemJumpDo) WithContext(ctx context.Context) *universeSystemJumpDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u universeSystemJumpDo) ReadDB() *universeSystemJumpDo {
	return u.Clauses(dbresolver.Read)
}

func (u universeSystemJumpDo) WriteDB() *universeSystemJumpDo {
	return u.Clauses(dbresolver.Write)
}

func (u universeSystemJumpDo) Session(config *gorm.Session) *universeSystemJumpDo {
	return u.withDO(u.DO.Session(config))
}

func (u universeSystemJumpDo) Clauses(conds ...clause.Expression) *universeSystemJumpDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u universeSystemJumpDo) Returning(value interface{}, columns ...string) *universeSystemJumpDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u universeSystemJumpDo) Not(conds ...gen.Condition) *universeSystemJumpDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u universeSystemJumpDo) Or(conds ...gen.Condition) *universeSystemJumpDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u universeSystemJumpDo) Select(conds ...field.Expr) *universeSystemJumpDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u universeSystemJumpDo) Where(conds ...gen.Condition) *universeSystemJumpDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u universeSystemJumpDo) Order(conds ...field.Expr) *universeSystemJumpDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u universeSystemJumpDo) Distinct(cols ...field.Expr) *universeSystemJumpDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u universeSystemJumpDo) Omit(cols ...field.Expr) *universeSystemJumpDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u universeSystemJumpDo) Join(table schema.Tabler, on ...field.Expr) *universeSystemJumpDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u universeSystemJumpDo) LeftJoin(table schema.Tabler, on ...field.Expr) *universeSystemJumpDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u universeSystemJumpDo) RightJoin(table schema.Tabler, on ...field.Expr) *universeSystemJumpDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u universeSystemJumpDo) Group(cols ...field.Expr) *universeSystemJumpDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u universeSystemJumpDo) Having(conds ...gen.Condition) *universeSystemJumpDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u universeSystemJumpDo) Limit(limit int) *universeSystemJumpDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u universeSystemJumpDo) Offset(offset int) *universeSystemJumpDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u universeSystemJumpDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *universeSystemJumpDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u universeSystemJumpDo) Unscoped() *universeSystemJumpDo {
	return u.withDO(u.DO.Unscoped())
}

func (u universeSystemJumpDo) Create(values ...*model.UniverseSystemJump) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u universeSystemJumpDo) CreateInBatches(values []*model.UniverseSystemJump, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u universeSystemJumpDo) Save(values ...*model.UniverseSystemJump) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u universeSystemJumpDo) First() (*model.UniverseSystemJump, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseSystemJump), nil
	}
}

func (u universeSystemJumpDo) Take() (*model.UniverseSystemJump, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseSystemJump), nil
	}
}

func (u universeSystemJumpDo) Last() (*model.UniverseSystemJump, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseSystemJump), nil
	}
}

func (u universeSystemJumpDo) Find() ([]*model.UniverseSystemJump, error) {
	result, err := u.DO.Find()
	return result.([]*model.UniverseSystemJump), err
}

func (u universeSystemJumpDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UniverseSystemJump, err error) {
	buf := make([]*model.UniverseSystemJump, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u universeSystemJumpDo) FindInBatches(result *[]*model.UniverseSystemJump, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u universeSystemJumpDo) Attrs(attrs ...field.AssignExpr) *universeSystemJumpDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u universeSystemJumpDo) Assign(attrs ...field.AssignExpr) *universeSystemJumpDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u universeSystemJumpDo) Joins(fields ...field.RelationField) *universeSystemJumpDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u universeSystemJumpDo) Preload(fields ...field.RelationField) *universeSystemJumpDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u universeSystemJumpDo) FirstOrInit() (*model.UniverseSystemJump, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseSystemJump), nil
	}
}

func (u universeSystemJumpDo) FirstOrCreate() (*model.UniverseSystemJump, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseSystemJump), nil
	}
}

func (u universeSystemJumpDo) FindByPage(offset int, limit int) (result []*model.UniverseSystemJump, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u universeSystemJumpDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u universeSystemJumpDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u universeSystemJumpDo) Delete(models ...*model.UniverseSystemJump) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *universeSystemJumpDo) withDO(do gen.Dao) *universeSystemJumpDo {
	u.DO = *do.(*gen.DO)
	return u
}
