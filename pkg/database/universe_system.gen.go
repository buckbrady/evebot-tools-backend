// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/buckbrady/evebot-tools-backend/pkg/model"
)

func newUniverseSystem(db *gorm.DB, opts ...gen.DOOption) universeSystem {
	_universeSystem := universeSystem{}

	_universeSystem.universeSystemDo.UseDB(db, opts...)
	_universeSystem.universeSystemDo.UseModel(&model.UniverseSystem{})

	tableName := _universeSystem.universeSystemDo.TableName()
	_universeSystem.ALL = field.NewAsterisk(tableName)
	_universeSystem.ID = field.NewInt32(tableName, "id")
	_universeSystem.Name = field.NewString(tableName, "name")
	_universeSystem.SecurityClass = field.NewString(tableName, "security_class")
	_universeSystem.SecurityStatus = field.NewFloat64(tableName, "security_status")
	_universeSystem.ConstellationID = field.NewInt32(tableName, "constellation_id")
	_universeSystem.StarID = field.NewInt32(tableName, "star_id")
	_universeSystem.PositionX = field.NewFloat64(tableName, "position_x")
	_universeSystem.PositionY = field.NewFloat64(tableName, "position_y")
	_universeSystem.PositionZ = field.NewFloat64(tableName, "position_z")

	_universeSystem.fillFieldMap()

	return _universeSystem
}

type universeSystem struct {
	universeSystemDo universeSystemDo

	ALL             field.Asterisk
	ID              field.Int32
	Name            field.String
	SecurityClass   field.String
	SecurityStatus  field.Float64
	ConstellationID field.Int32
	StarID          field.Int32
	PositionX       field.Float64
	PositionY       field.Float64
	PositionZ       field.Float64

	fieldMap map[string]field.Expr
}

func (u universeSystem) Table(newTableName string) *universeSystem {
	u.universeSystemDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u universeSystem) As(alias string) *universeSystem {
	u.universeSystemDo.DO = *(u.universeSystemDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *universeSystem) updateTableName(table string) *universeSystem {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.Name = field.NewString(table, "name")
	u.SecurityClass = field.NewString(table, "security_class")
	u.SecurityStatus = field.NewFloat64(table, "security_status")
	u.ConstellationID = field.NewInt32(table, "constellation_id")
	u.StarID = field.NewInt32(table, "star_id")
	u.PositionX = field.NewFloat64(table, "position_x")
	u.PositionY = field.NewFloat64(table, "position_y")
	u.PositionZ = field.NewFloat64(table, "position_z")

	u.fillFieldMap()

	return u
}

func (u *universeSystem) WithContext(ctx context.Context) *universeSystemDo {
	return u.universeSystemDo.WithContext(ctx)
}

func (u universeSystem) TableName() string { return u.universeSystemDo.TableName() }

func (u universeSystem) Alias() string { return u.universeSystemDo.Alias() }

func (u universeSystem) Columns(cols ...field.Expr) gen.Columns {
	return u.universeSystemDo.Columns(cols...)
}

func (u *universeSystem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *universeSystem) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["name"] = u.Name
	u.fieldMap["security_class"] = u.SecurityClass
	u.fieldMap["security_status"] = u.SecurityStatus
	u.fieldMap["constellation_id"] = u.ConstellationID
	u.fieldMap["star_id"] = u.StarID
	u.fieldMap["position_x"] = u.PositionX
	u.fieldMap["position_y"] = u.PositionY
	u.fieldMap["position_z"] = u.PositionZ
}

func (u universeSystem) clone(db *gorm.DB) universeSystem {
	u.universeSystemDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u universeSystem) replaceDB(db *gorm.DB) universeSystem {
	u.universeSystemDo.ReplaceDB(db)
	return u
}

type universeSystemDo struct{ gen.DO }

func (u universeSystemDo) Debug() *universeSystemDo {
	return u.withDO(u.DO.Debug())
}

func (u universeSystemDo) WithContext(ctx context.Context) *universeSystemDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u universeSystemDo) ReadDB() *universeSystemDo {
	return u.Clauses(dbresolver.Read)
}

func (u universeSystemDo) WriteDB() *universeSystemDo {
	return u.Clauses(dbresolver.Write)
}

func (u universeSystemDo) Session(config *gorm.Session) *universeSystemDo {
	return u.withDO(u.DO.Session(config))
}

func (u universeSystemDo) Clauses(conds ...clause.Expression) *universeSystemDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u universeSystemDo) Returning(value interface{}, columns ...string) *universeSystemDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u universeSystemDo) Not(conds ...gen.Condition) *universeSystemDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u universeSystemDo) Or(conds ...gen.Condition) *universeSystemDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u universeSystemDo) Select(conds ...field.Expr) *universeSystemDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u universeSystemDo) Where(conds ...gen.Condition) *universeSystemDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u universeSystemDo) Order(conds ...field.Expr) *universeSystemDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u universeSystemDo) Distinct(cols ...field.Expr) *universeSystemDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u universeSystemDo) Omit(cols ...field.Expr) *universeSystemDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u universeSystemDo) Join(table schema.Tabler, on ...field.Expr) *universeSystemDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u universeSystemDo) LeftJoin(table schema.Tabler, on ...field.Expr) *universeSystemDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u universeSystemDo) RightJoin(table schema.Tabler, on ...field.Expr) *universeSystemDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u universeSystemDo) Group(cols ...field.Expr) *universeSystemDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u universeSystemDo) Having(conds ...gen.Condition) *universeSystemDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u universeSystemDo) Limit(limit int) *universeSystemDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u universeSystemDo) Offset(offset int) *universeSystemDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u universeSystemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *universeSystemDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u universeSystemDo) Unscoped() *universeSystemDo {
	return u.withDO(u.DO.Unscoped())
}

func (u universeSystemDo) Create(values ...*model.UniverseSystem) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u universeSystemDo) CreateInBatches(values []*model.UniverseSystem, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u universeSystemDo) Save(values ...*model.UniverseSystem) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u universeSystemDo) First() (*model.UniverseSystem, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseSystem), nil
	}
}

func (u universeSystemDo) Take() (*model.UniverseSystem, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseSystem), nil
	}
}

func (u universeSystemDo) Last() (*model.UniverseSystem, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseSystem), nil
	}
}

func (u universeSystemDo) Find() ([]*model.UniverseSystem, error) {
	result, err := u.DO.Find()
	return result.([]*model.UniverseSystem), err
}

func (u universeSystemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UniverseSystem, err error) {
	buf := make([]*model.UniverseSystem, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u universeSystemDo) FindInBatches(result *[]*model.UniverseSystem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u universeSystemDo) Attrs(attrs ...field.AssignExpr) *universeSystemDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u universeSystemDo) Assign(attrs ...field.AssignExpr) *universeSystemDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u universeSystemDo) Joins(fields ...field.RelationField) *universeSystemDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u universeSystemDo) Preload(fields ...field.RelationField) *universeSystemDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u universeSystemDo) FirstOrInit() (*model.UniverseSystem, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseSystem), nil
	}
}

func (u universeSystemDo) FirstOrCreate() (*model.UniverseSystem, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseSystem), nil
	}
}

func (u universeSystemDo) FindByPage(offset int, limit int) (result []*model.UniverseSystem, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u universeSystemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u universeSystemDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u universeSystemDo) Delete(models ...*model.UniverseSystem) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *universeSystemDo) withDO(do gen.Dao) *universeSystemDo {
	u.DO = *do.(*gen.DO)
	return u
}
