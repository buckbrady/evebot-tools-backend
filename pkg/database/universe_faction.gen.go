// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/buckbrady/evebot-tools-backend/pkg/model"
)

func newUniverseFaction(db *gorm.DB, opts ...gen.DOOption) universeFaction {
	_universeFaction := universeFaction{}

	_universeFaction.universeFactionDo.UseDB(db, opts...)
	_universeFaction.universeFactionDo.UseModel(&model.UniverseFaction{})

	tableName := _universeFaction.universeFactionDo.TableName()
	_universeFaction.ALL = field.NewAsterisk(tableName)
	_universeFaction.ID = field.NewInt32(tableName, "id")
	_universeFaction.CorporationID = field.NewInt32(tableName, "corporation_id")
	_universeFaction.Description = field.NewString(tableName, "description")
	_universeFaction.IsUnique = field.NewBool(tableName, "is_unique")
	_universeFaction.MilitiaCorporationID = field.NewInt32(tableName, "militia_corporation_id")
	_universeFaction.Name = field.NewString(tableName, "name")
	_universeFaction.SizeFactor = field.NewFloat64(tableName, "size_factor")
	_universeFaction.SolarSystemID = field.NewInt32(tableName, "solar_system_id")
	_universeFaction.StationCount = field.NewInt32(tableName, "station_count")
	_universeFaction.StationSystemCount = field.NewInt32(tableName, "station_system_count")

	_universeFaction.fillFieldMap()

	return _universeFaction
}

type universeFaction struct {
	universeFactionDo universeFactionDo

	ALL                  field.Asterisk
	ID                   field.Int32
	CorporationID        field.Int32
	Description          field.String
	IsUnique             field.Bool
	MilitiaCorporationID field.Int32
	Name                 field.String
	SizeFactor           field.Float64
	SolarSystemID        field.Int32
	StationCount         field.Int32
	StationSystemCount   field.Int32

	fieldMap map[string]field.Expr
}

func (u universeFaction) Table(newTableName string) *universeFaction {
	u.universeFactionDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u universeFaction) As(alias string) *universeFaction {
	u.universeFactionDo.DO = *(u.universeFactionDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *universeFaction) updateTableName(table string) *universeFaction {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.CorporationID = field.NewInt32(table, "corporation_id")
	u.Description = field.NewString(table, "description")
	u.IsUnique = field.NewBool(table, "is_unique")
	u.MilitiaCorporationID = field.NewInt32(table, "militia_corporation_id")
	u.Name = field.NewString(table, "name")
	u.SizeFactor = field.NewFloat64(table, "size_factor")
	u.SolarSystemID = field.NewInt32(table, "solar_system_id")
	u.StationCount = field.NewInt32(table, "station_count")
	u.StationSystemCount = field.NewInt32(table, "station_system_count")

	u.fillFieldMap()

	return u
}

func (u *universeFaction) WithContext(ctx context.Context) *universeFactionDo {
	return u.universeFactionDo.WithContext(ctx)
}

func (u universeFaction) TableName() string { return u.universeFactionDo.TableName() }

func (u universeFaction) Alias() string { return u.universeFactionDo.Alias() }

func (u universeFaction) Columns(cols ...field.Expr) gen.Columns {
	return u.universeFactionDo.Columns(cols...)
}

func (u *universeFaction) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *universeFaction) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["id"] = u.ID
	u.fieldMap["corporation_id"] = u.CorporationID
	u.fieldMap["description"] = u.Description
	u.fieldMap["is_unique"] = u.IsUnique
	u.fieldMap["militia_corporation_id"] = u.MilitiaCorporationID
	u.fieldMap["name"] = u.Name
	u.fieldMap["size_factor"] = u.SizeFactor
	u.fieldMap["solar_system_id"] = u.SolarSystemID
	u.fieldMap["station_count"] = u.StationCount
	u.fieldMap["station_system_count"] = u.StationSystemCount
}

func (u universeFaction) clone(db *gorm.DB) universeFaction {
	u.universeFactionDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u universeFaction) replaceDB(db *gorm.DB) universeFaction {
	u.universeFactionDo.ReplaceDB(db)
	return u
}

type universeFactionDo struct{ gen.DO }

func (u universeFactionDo) Debug() *universeFactionDo {
	return u.withDO(u.DO.Debug())
}

func (u universeFactionDo) WithContext(ctx context.Context) *universeFactionDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u universeFactionDo) ReadDB() *universeFactionDo {
	return u.Clauses(dbresolver.Read)
}

func (u universeFactionDo) WriteDB() *universeFactionDo {
	return u.Clauses(dbresolver.Write)
}

func (u universeFactionDo) Session(config *gorm.Session) *universeFactionDo {
	return u.withDO(u.DO.Session(config))
}

func (u universeFactionDo) Clauses(conds ...clause.Expression) *universeFactionDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u universeFactionDo) Returning(value interface{}, columns ...string) *universeFactionDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u universeFactionDo) Not(conds ...gen.Condition) *universeFactionDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u universeFactionDo) Or(conds ...gen.Condition) *universeFactionDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u universeFactionDo) Select(conds ...field.Expr) *universeFactionDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u universeFactionDo) Where(conds ...gen.Condition) *universeFactionDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u universeFactionDo) Order(conds ...field.Expr) *universeFactionDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u universeFactionDo) Distinct(cols ...field.Expr) *universeFactionDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u universeFactionDo) Omit(cols ...field.Expr) *universeFactionDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u universeFactionDo) Join(table schema.Tabler, on ...field.Expr) *universeFactionDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u universeFactionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *universeFactionDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u universeFactionDo) RightJoin(table schema.Tabler, on ...field.Expr) *universeFactionDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u universeFactionDo) Group(cols ...field.Expr) *universeFactionDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u universeFactionDo) Having(conds ...gen.Condition) *universeFactionDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u universeFactionDo) Limit(limit int) *universeFactionDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u universeFactionDo) Offset(offset int) *universeFactionDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u universeFactionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *universeFactionDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u universeFactionDo) Unscoped() *universeFactionDo {
	return u.withDO(u.DO.Unscoped())
}

func (u universeFactionDo) Create(values ...*model.UniverseFaction) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u universeFactionDo) CreateInBatches(values []*model.UniverseFaction, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u universeFactionDo) Save(values ...*model.UniverseFaction) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u universeFactionDo) First() (*model.UniverseFaction, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseFaction), nil
	}
}

func (u universeFactionDo) Take() (*model.UniverseFaction, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseFaction), nil
	}
}

func (u universeFactionDo) Last() (*model.UniverseFaction, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseFaction), nil
	}
}

func (u universeFactionDo) Find() ([]*model.UniverseFaction, error) {
	result, err := u.DO.Find()
	return result.([]*model.UniverseFaction), err
}

func (u universeFactionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UniverseFaction, err error) {
	buf := make([]*model.UniverseFaction, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u universeFactionDo) FindInBatches(result *[]*model.UniverseFaction, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u universeFactionDo) Attrs(attrs ...field.AssignExpr) *universeFactionDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u universeFactionDo) Assign(attrs ...field.AssignExpr) *universeFactionDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u universeFactionDo) Joins(fields ...field.RelationField) *universeFactionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u universeFactionDo) Preload(fields ...field.RelationField) *universeFactionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u universeFactionDo) FirstOrInit() (*model.UniverseFaction, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseFaction), nil
	}
}

func (u universeFactionDo) FirstOrCreate() (*model.UniverseFaction, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseFaction), nil
	}
}

func (u universeFactionDo) FindByPage(offset int, limit int) (result []*model.UniverseFaction, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u universeFactionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u universeFactionDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u universeFactionDo) Delete(models ...*model.UniverseFaction) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *universeFactionDo) withDO(do gen.Dao) *universeFactionDo {
	u.DO = *do.(*gen.DO)
	return u
}
