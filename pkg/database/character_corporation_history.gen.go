// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/buckbrady/evebot-tools-backend/pkg/model"
)

func newCharacterCorporationHistory(db *gorm.DB, opts ...gen.DOOption) characterCorporationHistory {
	_characterCorporationHistory := characterCorporationHistory{}

	_characterCorporationHistory.characterCorporationHistoryDo.UseDB(db, opts...)
	_characterCorporationHistory.characterCorporationHistoryDo.UseModel(&model.CharacterCorporationHistory{})

	tableName := _characterCorporationHistory.characterCorporationHistoryDo.TableName()
	_characterCorporationHistory.ALL = field.NewAsterisk(tableName)
	_characterCorporationHistory.ID = field.NewInt32(tableName, "id")
	_characterCorporationHistory.CorporationID = field.NewInt32(tableName, "corporation_id")
	_characterCorporationHistory.IsDeleted = field.NewBool(tableName, "is_deleted")
	_characterCorporationHistory.RecordID = field.NewInt32(tableName, "record_id")
	_characterCorporationHistory.StartDate = field.NewTime(tableName, "start_date")

	_characterCorporationHistory.fillFieldMap()

	return _characterCorporationHistory
}

type characterCorporationHistory struct {
	characterCorporationHistoryDo characterCorporationHistoryDo

	ALL           field.Asterisk
	ID            field.Int32
	CorporationID field.Int32
	IsDeleted     field.Bool
	RecordID      field.Int32
	StartDate     field.Time

	fieldMap map[string]field.Expr
}

func (c characterCorporationHistory) Table(newTableName string) *characterCorporationHistory {
	c.characterCorporationHistoryDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c characterCorporationHistory) As(alias string) *characterCorporationHistory {
	c.characterCorporationHistoryDo.DO = *(c.characterCorporationHistoryDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *characterCorporationHistory) updateTableName(table string) *characterCorporationHistory {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.CorporationID = field.NewInt32(table, "corporation_id")
	c.IsDeleted = field.NewBool(table, "is_deleted")
	c.RecordID = field.NewInt32(table, "record_id")
	c.StartDate = field.NewTime(table, "start_date")

	c.fillFieldMap()

	return c
}

func (c *characterCorporationHistory) WithContext(ctx context.Context) *characterCorporationHistoryDo {
	return c.characterCorporationHistoryDo.WithContext(ctx)
}

func (c characterCorporationHistory) TableName() string {
	return c.characterCorporationHistoryDo.TableName()
}

func (c characterCorporationHistory) Alias() string { return c.characterCorporationHistoryDo.Alias() }

func (c characterCorporationHistory) Columns(cols ...field.Expr) gen.Columns {
	return c.characterCorporationHistoryDo.Columns(cols...)
}

func (c *characterCorporationHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *characterCorporationHistory) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 5)
	c.fieldMap["id"] = c.ID
	c.fieldMap["corporation_id"] = c.CorporationID
	c.fieldMap["is_deleted"] = c.IsDeleted
	c.fieldMap["record_id"] = c.RecordID
	c.fieldMap["start_date"] = c.StartDate
}

func (c characterCorporationHistory) clone(db *gorm.DB) characterCorporationHistory {
	c.characterCorporationHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c characterCorporationHistory) replaceDB(db *gorm.DB) characterCorporationHistory {
	c.characterCorporationHistoryDo.ReplaceDB(db)
	return c
}

type characterCorporationHistoryDo struct{ gen.DO }

func (c characterCorporationHistoryDo) Debug() *characterCorporationHistoryDo {
	return c.withDO(c.DO.Debug())
}

func (c characterCorporationHistoryDo) WithContext(ctx context.Context) *characterCorporationHistoryDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c characterCorporationHistoryDo) ReadDB() *characterCorporationHistoryDo {
	return c.Clauses(dbresolver.Read)
}

func (c characterCorporationHistoryDo) WriteDB() *characterCorporationHistoryDo {
	return c.Clauses(dbresolver.Write)
}

func (c characterCorporationHistoryDo) Session(config *gorm.Session) *characterCorporationHistoryDo {
	return c.withDO(c.DO.Session(config))
}

func (c characterCorporationHistoryDo) Clauses(conds ...clause.Expression) *characterCorporationHistoryDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c characterCorporationHistoryDo) Returning(value interface{}, columns ...string) *characterCorporationHistoryDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c characterCorporationHistoryDo) Not(conds ...gen.Condition) *characterCorporationHistoryDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c characterCorporationHistoryDo) Or(conds ...gen.Condition) *characterCorporationHistoryDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c characterCorporationHistoryDo) Select(conds ...field.Expr) *characterCorporationHistoryDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c characterCorporationHistoryDo) Where(conds ...gen.Condition) *characterCorporationHistoryDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c characterCorporationHistoryDo) Order(conds ...field.Expr) *characterCorporationHistoryDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c characterCorporationHistoryDo) Distinct(cols ...field.Expr) *characterCorporationHistoryDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c characterCorporationHistoryDo) Omit(cols ...field.Expr) *characterCorporationHistoryDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c characterCorporationHistoryDo) Join(table schema.Tabler, on ...field.Expr) *characterCorporationHistoryDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c characterCorporationHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *characterCorporationHistoryDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c characterCorporationHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) *characterCorporationHistoryDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c characterCorporationHistoryDo) Group(cols ...field.Expr) *characterCorporationHistoryDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c characterCorporationHistoryDo) Having(conds ...gen.Condition) *characterCorporationHistoryDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c characterCorporationHistoryDo) Limit(limit int) *characterCorporationHistoryDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c characterCorporationHistoryDo) Offset(offset int) *characterCorporationHistoryDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c characterCorporationHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *characterCorporationHistoryDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c characterCorporationHistoryDo) Unscoped() *characterCorporationHistoryDo {
	return c.withDO(c.DO.Unscoped())
}

func (c characterCorporationHistoryDo) Create(values ...*model.CharacterCorporationHistory) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c characterCorporationHistoryDo) CreateInBatches(values []*model.CharacterCorporationHistory, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c characterCorporationHistoryDo) Save(values ...*model.CharacterCorporationHistory) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c characterCorporationHistoryDo) First() (*model.CharacterCorporationHistory, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CharacterCorporationHistory), nil
	}
}

func (c characterCorporationHistoryDo) Take() (*model.CharacterCorporationHistory, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CharacterCorporationHistory), nil
	}
}

func (c characterCorporationHistoryDo) Last() (*model.CharacterCorporationHistory, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CharacterCorporationHistory), nil
	}
}

func (c characterCorporationHistoryDo) Find() ([]*model.CharacterCorporationHistory, error) {
	result, err := c.DO.Find()
	return result.([]*model.CharacterCorporationHistory), err
}

func (c characterCorporationHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CharacterCorporationHistory, err error) {
	buf := make([]*model.CharacterCorporationHistory, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c characterCorporationHistoryDo) FindInBatches(result *[]*model.CharacterCorporationHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c characterCorporationHistoryDo) Attrs(attrs ...field.AssignExpr) *characterCorporationHistoryDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c characterCorporationHistoryDo) Assign(attrs ...field.AssignExpr) *characterCorporationHistoryDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c characterCorporationHistoryDo) Joins(fields ...field.RelationField) *characterCorporationHistoryDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c characterCorporationHistoryDo) Preload(fields ...field.RelationField) *characterCorporationHistoryDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c characterCorporationHistoryDo) FirstOrInit() (*model.CharacterCorporationHistory, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CharacterCorporationHistory), nil
	}
}

func (c characterCorporationHistoryDo) FirstOrCreate() (*model.CharacterCorporationHistory, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CharacterCorporationHistory), nil
	}
}

func (c characterCorporationHistoryDo) FindByPage(offset int, limit int) (result []*model.CharacterCorporationHistory, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c characterCorporationHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c characterCorporationHistoryDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c characterCorporationHistoryDo) Delete(models ...*model.CharacterCorporationHistory) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *characterCorporationHistoryDo) withDO(do gen.Dao) *characterCorporationHistoryDo {
	c.DO = *do.(*gen.DO)
	return c
}
