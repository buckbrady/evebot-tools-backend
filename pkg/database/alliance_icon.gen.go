// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/buckbrady/evebot-tools-backend/pkg/model"
)

func newAllianceIcon(db *gorm.DB, opts ...gen.DOOption) allianceIcon {
	_allianceIcon := allianceIcon{}

	_allianceIcon.allianceIconDo.UseDB(db, opts...)
	_allianceIcon.allianceIconDo.UseModel(&model.AllianceIcon{})

	tableName := _allianceIcon.allianceIconDo.TableName()
	_allianceIcon.ALL = field.NewAsterisk(tableName)
	_allianceIcon.ID = field.NewInt32(tableName, "id")
	_allianceIcon.Px128x128 = field.NewString(tableName, "px128x128")
	_allianceIcon.Px64x64 = field.NewString(tableName, "px64x64")

	_allianceIcon.fillFieldMap()

	return _allianceIcon
}

type allianceIcon struct {
	allianceIconDo allianceIconDo

	ALL       field.Asterisk
	ID        field.Int32
	Px128x128 field.String
	Px64x64   field.String

	fieldMap map[string]field.Expr
}

func (a allianceIcon) Table(newTableName string) *allianceIcon {
	a.allianceIconDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a allianceIcon) As(alias string) *allianceIcon {
	a.allianceIconDo.DO = *(a.allianceIconDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *allianceIcon) updateTableName(table string) *allianceIcon {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.Px128x128 = field.NewString(table, "px128x128")
	a.Px64x64 = field.NewString(table, "px64x64")

	a.fillFieldMap()

	return a
}

func (a *allianceIcon) WithContext(ctx context.Context) *allianceIconDo {
	return a.allianceIconDo.WithContext(ctx)
}

func (a allianceIcon) TableName() string { return a.allianceIconDo.TableName() }

func (a allianceIcon) Alias() string { return a.allianceIconDo.Alias() }

func (a allianceIcon) Columns(cols ...field.Expr) gen.Columns {
	return a.allianceIconDo.Columns(cols...)
}

func (a *allianceIcon) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *allianceIcon) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 3)
	a.fieldMap["id"] = a.ID
	a.fieldMap["px128x128"] = a.Px128x128
	a.fieldMap["px64x64"] = a.Px64x64
}

func (a allianceIcon) clone(db *gorm.DB) allianceIcon {
	a.allianceIconDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a allianceIcon) replaceDB(db *gorm.DB) allianceIcon {
	a.allianceIconDo.ReplaceDB(db)
	return a
}

type allianceIconDo struct{ gen.DO }

func (a allianceIconDo) Debug() *allianceIconDo {
	return a.withDO(a.DO.Debug())
}

func (a allianceIconDo) WithContext(ctx context.Context) *allianceIconDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a allianceIconDo) ReadDB() *allianceIconDo {
	return a.Clauses(dbresolver.Read)
}

func (a allianceIconDo) WriteDB() *allianceIconDo {
	return a.Clauses(dbresolver.Write)
}

func (a allianceIconDo) Session(config *gorm.Session) *allianceIconDo {
	return a.withDO(a.DO.Session(config))
}

func (a allianceIconDo) Clauses(conds ...clause.Expression) *allianceIconDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a allianceIconDo) Returning(value interface{}, columns ...string) *allianceIconDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a allianceIconDo) Not(conds ...gen.Condition) *allianceIconDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a allianceIconDo) Or(conds ...gen.Condition) *allianceIconDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a allianceIconDo) Select(conds ...field.Expr) *allianceIconDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a allianceIconDo) Where(conds ...gen.Condition) *allianceIconDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a allianceIconDo) Order(conds ...field.Expr) *allianceIconDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a allianceIconDo) Distinct(cols ...field.Expr) *allianceIconDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a allianceIconDo) Omit(cols ...field.Expr) *allianceIconDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a allianceIconDo) Join(table schema.Tabler, on ...field.Expr) *allianceIconDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a allianceIconDo) LeftJoin(table schema.Tabler, on ...field.Expr) *allianceIconDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a allianceIconDo) RightJoin(table schema.Tabler, on ...field.Expr) *allianceIconDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a allianceIconDo) Group(cols ...field.Expr) *allianceIconDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a allianceIconDo) Having(conds ...gen.Condition) *allianceIconDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a allianceIconDo) Limit(limit int) *allianceIconDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a allianceIconDo) Offset(offset int) *allianceIconDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a allianceIconDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *allianceIconDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a allianceIconDo) Unscoped() *allianceIconDo {
	return a.withDO(a.DO.Unscoped())
}

func (a allianceIconDo) Create(values ...*model.AllianceIcon) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a allianceIconDo) CreateInBatches(values []*model.AllianceIcon, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a allianceIconDo) Save(values ...*model.AllianceIcon) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a allianceIconDo) First() (*model.AllianceIcon, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllianceIcon), nil
	}
}

func (a allianceIconDo) Take() (*model.AllianceIcon, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllianceIcon), nil
	}
}

func (a allianceIconDo) Last() (*model.AllianceIcon, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllianceIcon), nil
	}
}

func (a allianceIconDo) Find() ([]*model.AllianceIcon, error) {
	result, err := a.DO.Find()
	return result.([]*model.AllianceIcon), err
}

func (a allianceIconDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AllianceIcon, err error) {
	buf := make([]*model.AllianceIcon, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a allianceIconDo) FindInBatches(result *[]*model.AllianceIcon, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a allianceIconDo) Attrs(attrs ...field.AssignExpr) *allianceIconDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a allianceIconDo) Assign(attrs ...field.AssignExpr) *allianceIconDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a allianceIconDo) Joins(fields ...field.RelationField) *allianceIconDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a allianceIconDo) Preload(fields ...field.RelationField) *allianceIconDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a allianceIconDo) FirstOrInit() (*model.AllianceIcon, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllianceIcon), nil
	}
}

func (a allianceIconDo) FirstOrCreate() (*model.AllianceIcon, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AllianceIcon), nil
	}
}

func (a allianceIconDo) FindByPage(offset int, limit int) (result []*model.AllianceIcon, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a allianceIconDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a allianceIconDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a allianceIconDo) Delete(models ...*model.AllianceIcon) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *allianceIconDo) withDO(do gen.Dao) *allianceIconDo {
	a.DO = *do.(*gen.DO)
	return a
}
