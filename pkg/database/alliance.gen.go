// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/buckbrady/evebot-tools-backend/pkg/model"
)

func newAlliance(db *gorm.DB, opts ...gen.DOOption) alliance {
	_alliance := alliance{}

	_alliance.allianceDo.UseDB(db, opts...)
	_alliance.allianceDo.UseModel(&model.Alliance{})

	tableName := _alliance.allianceDo.TableName()
	_alliance.ALL = field.NewAsterisk(tableName)
	_alliance.ID = field.NewInt32(tableName, "id")
	_alliance.CreatorCorporationID = field.NewInt32(tableName, "creator_corporation_id")
	_alliance.CreatorID = field.NewInt32(tableName, "creator_id")
	_alliance.DateFounded = field.NewTime(tableName, "date_founded")
	_alliance.ExecutorCorporationID = field.NewInt32(tableName, "executor_corporation_id")
	_alliance.FactionID = field.NewInt32(tableName, "faction_id")
	_alliance.Name = field.NewString(tableName, "name")
	_alliance.Ticker = field.NewString(tableName, "ticker")

	_alliance.fillFieldMap()

	return _alliance
}

type alliance struct {
	allianceDo allianceDo

	ALL                   field.Asterisk
	ID                    field.Int32
	CreatorCorporationID  field.Int32
	CreatorID             field.Int32
	DateFounded           field.Time
	ExecutorCorporationID field.Int32
	FactionID             field.Int32
	Name                  field.String
	Ticker                field.String

	fieldMap map[string]field.Expr
}

func (a alliance) Table(newTableName string) *alliance {
	a.allianceDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a alliance) As(alias string) *alliance {
	a.allianceDo.DO = *(a.allianceDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *alliance) updateTableName(table string) *alliance {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.CreatorCorporationID = field.NewInt32(table, "creator_corporation_id")
	a.CreatorID = field.NewInt32(table, "creator_id")
	a.DateFounded = field.NewTime(table, "date_founded")
	a.ExecutorCorporationID = field.NewInt32(table, "executor_corporation_id")
	a.FactionID = field.NewInt32(table, "faction_id")
	a.Name = field.NewString(table, "name")
	a.Ticker = field.NewString(table, "ticker")

	a.fillFieldMap()

	return a
}

func (a *alliance) WithContext(ctx context.Context) *allianceDo { return a.allianceDo.WithContext(ctx) }

func (a alliance) TableName() string { return a.allianceDo.TableName() }

func (a alliance) Alias() string { return a.allianceDo.Alias() }

func (a alliance) Columns(cols ...field.Expr) gen.Columns { return a.allianceDo.Columns(cols...) }

func (a *alliance) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *alliance) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["id"] = a.ID
	a.fieldMap["creator_corporation_id"] = a.CreatorCorporationID
	a.fieldMap["creator_id"] = a.CreatorID
	a.fieldMap["date_founded"] = a.DateFounded
	a.fieldMap["executor_corporation_id"] = a.ExecutorCorporationID
	a.fieldMap["faction_id"] = a.FactionID
	a.fieldMap["name"] = a.Name
	a.fieldMap["ticker"] = a.Ticker
}

func (a alliance) clone(db *gorm.DB) alliance {
	a.allianceDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a alliance) replaceDB(db *gorm.DB) alliance {
	a.allianceDo.ReplaceDB(db)
	return a
}

type allianceDo struct{ gen.DO }

func (a allianceDo) Debug() *allianceDo {
	return a.withDO(a.DO.Debug())
}

func (a allianceDo) WithContext(ctx context.Context) *allianceDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a allianceDo) ReadDB() *allianceDo {
	return a.Clauses(dbresolver.Read)
}

func (a allianceDo) WriteDB() *allianceDo {
	return a.Clauses(dbresolver.Write)
}

func (a allianceDo) Session(config *gorm.Session) *allianceDo {
	return a.withDO(a.DO.Session(config))
}

func (a allianceDo) Clauses(conds ...clause.Expression) *allianceDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a allianceDo) Returning(value interface{}, columns ...string) *allianceDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a allianceDo) Not(conds ...gen.Condition) *allianceDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a allianceDo) Or(conds ...gen.Condition) *allianceDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a allianceDo) Select(conds ...field.Expr) *allianceDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a allianceDo) Where(conds ...gen.Condition) *allianceDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a allianceDo) Order(conds ...field.Expr) *allianceDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a allianceDo) Distinct(cols ...field.Expr) *allianceDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a allianceDo) Omit(cols ...field.Expr) *allianceDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a allianceDo) Join(table schema.Tabler, on ...field.Expr) *allianceDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a allianceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *allianceDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a allianceDo) RightJoin(table schema.Tabler, on ...field.Expr) *allianceDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a allianceDo) Group(cols ...field.Expr) *allianceDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a allianceDo) Having(conds ...gen.Condition) *allianceDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a allianceDo) Limit(limit int) *allianceDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a allianceDo) Offset(offset int) *allianceDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a allianceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *allianceDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a allianceDo) Unscoped() *allianceDo {
	return a.withDO(a.DO.Unscoped())
}

func (a allianceDo) Create(values ...*model.Alliance) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a allianceDo) CreateInBatches(values []*model.Alliance, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a allianceDo) Save(values ...*model.Alliance) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a allianceDo) First() (*model.Alliance, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Alliance), nil
	}
}

func (a allianceDo) Take() (*model.Alliance, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Alliance), nil
	}
}

func (a allianceDo) Last() (*model.Alliance, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Alliance), nil
	}
}

func (a allianceDo) Find() ([]*model.Alliance, error) {
	result, err := a.DO.Find()
	return result.([]*model.Alliance), err
}

func (a allianceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Alliance, err error) {
	buf := make([]*model.Alliance, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a allianceDo) FindInBatches(result *[]*model.Alliance, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a allianceDo) Attrs(attrs ...field.AssignExpr) *allianceDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a allianceDo) Assign(attrs ...field.AssignExpr) *allianceDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a allianceDo) Joins(fields ...field.RelationField) *allianceDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a allianceDo) Preload(fields ...field.RelationField) *allianceDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a allianceDo) FirstOrInit() (*model.Alliance, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Alliance), nil
	}
}

func (a allianceDo) FirstOrCreate() (*model.Alliance, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Alliance), nil
	}
}

func (a allianceDo) FindByPage(offset int, limit int) (result []*model.Alliance, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a allianceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a allianceDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a allianceDo) Delete(models ...*model.Alliance) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *allianceDo) withDO(do gen.Dao) *allianceDo {
	a.DO = *do.(*gen.DO)
	return a
}
