// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/buckbrady/evebot-tools-backend/pkg/model"
)

func newKillmailStat(db *gorm.DB, opts ...gen.DOOption) killmailStat {
	_killmailStat := killmailStat{}

	_killmailStat.killmailStatDo.UseDB(db, opts...)
	_killmailStat.killmailStatDo.UseModel(&model.KillmailStat{})

	tableName := _killmailStat.killmailStatDo.TableName()
	_killmailStat.ALL = field.NewAsterisk(tableName)
	_killmailStat.ID = field.NewInt64(tableName, "id")
	_killmailStat.LocationID = field.NewInt32(tableName, "location_id")
	_killmailStat.Hash = field.NewString(tableName, "hash")
	_killmailStat.FittedValue = field.NewFloat64(tableName, "fitted_value")
	_killmailStat.DestroyedValue = field.NewFloat64(tableName, "destroyed_value")
	_killmailStat.DroppedValue = field.NewFloat64(tableName, "dropped_value")
	_killmailStat.Href = field.NewString(tableName, "href")

	_killmailStat.fillFieldMap()

	return _killmailStat
}

type killmailStat struct {
	killmailStatDo killmailStatDo

	ALL            field.Asterisk
	ID             field.Int64
	LocationID     field.Int32
	Hash           field.String
	FittedValue    field.Float64
	DestroyedValue field.Float64
	DroppedValue   field.Float64
	Href           field.String

	fieldMap map[string]field.Expr
}

func (k killmailStat) Table(newTableName string) *killmailStat {
	k.killmailStatDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k killmailStat) As(alias string) *killmailStat {
	k.killmailStatDo.DO = *(k.killmailStatDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *killmailStat) updateTableName(table string) *killmailStat {
	k.ALL = field.NewAsterisk(table)
	k.ID = field.NewInt64(table, "id")
	k.LocationID = field.NewInt32(table, "location_id")
	k.Hash = field.NewString(table, "hash")
	k.FittedValue = field.NewFloat64(table, "fitted_value")
	k.DestroyedValue = field.NewFloat64(table, "destroyed_value")
	k.DroppedValue = field.NewFloat64(table, "dropped_value")
	k.Href = field.NewString(table, "href")

	k.fillFieldMap()

	return k
}

func (k *killmailStat) WithContext(ctx context.Context) *killmailStatDo {
	return k.killmailStatDo.WithContext(ctx)
}

func (k killmailStat) TableName() string { return k.killmailStatDo.TableName() }

func (k killmailStat) Alias() string { return k.killmailStatDo.Alias() }

func (k killmailStat) Columns(cols ...field.Expr) gen.Columns {
	return k.killmailStatDo.Columns(cols...)
}

func (k *killmailStat) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *killmailStat) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 7)
	k.fieldMap["id"] = k.ID
	k.fieldMap["location_id"] = k.LocationID
	k.fieldMap["hash"] = k.Hash
	k.fieldMap["fitted_value"] = k.FittedValue
	k.fieldMap["destroyed_value"] = k.DestroyedValue
	k.fieldMap["dropped_value"] = k.DroppedValue
	k.fieldMap["href"] = k.Href
}

func (k killmailStat) clone(db *gorm.DB) killmailStat {
	k.killmailStatDo.ReplaceConnPool(db.Statement.ConnPool)
	return k
}

func (k killmailStat) replaceDB(db *gorm.DB) killmailStat {
	k.killmailStatDo.ReplaceDB(db)
	return k
}

type killmailStatDo struct{ gen.DO }

func (k killmailStatDo) Debug() *killmailStatDo {
	return k.withDO(k.DO.Debug())
}

func (k killmailStatDo) WithContext(ctx context.Context) *killmailStatDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k killmailStatDo) ReadDB() *killmailStatDo {
	return k.Clauses(dbresolver.Read)
}

func (k killmailStatDo) WriteDB() *killmailStatDo {
	return k.Clauses(dbresolver.Write)
}

func (k killmailStatDo) Session(config *gorm.Session) *killmailStatDo {
	return k.withDO(k.DO.Session(config))
}

func (k killmailStatDo) Clauses(conds ...clause.Expression) *killmailStatDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k killmailStatDo) Returning(value interface{}, columns ...string) *killmailStatDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k killmailStatDo) Not(conds ...gen.Condition) *killmailStatDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k killmailStatDo) Or(conds ...gen.Condition) *killmailStatDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k killmailStatDo) Select(conds ...field.Expr) *killmailStatDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k killmailStatDo) Where(conds ...gen.Condition) *killmailStatDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k killmailStatDo) Order(conds ...field.Expr) *killmailStatDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k killmailStatDo) Distinct(cols ...field.Expr) *killmailStatDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k killmailStatDo) Omit(cols ...field.Expr) *killmailStatDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k killmailStatDo) Join(table schema.Tabler, on ...field.Expr) *killmailStatDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k killmailStatDo) LeftJoin(table schema.Tabler, on ...field.Expr) *killmailStatDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k killmailStatDo) RightJoin(table schema.Tabler, on ...field.Expr) *killmailStatDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k killmailStatDo) Group(cols ...field.Expr) *killmailStatDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k killmailStatDo) Having(conds ...gen.Condition) *killmailStatDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k killmailStatDo) Limit(limit int) *killmailStatDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k killmailStatDo) Offset(offset int) *killmailStatDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k killmailStatDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *killmailStatDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k killmailStatDo) Unscoped() *killmailStatDo {
	return k.withDO(k.DO.Unscoped())
}

func (k killmailStatDo) Create(values ...*model.KillmailStat) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k killmailStatDo) CreateInBatches(values []*model.KillmailStat, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k killmailStatDo) Save(values ...*model.KillmailStat) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k killmailStatDo) First() (*model.KillmailStat, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.KillmailStat), nil
	}
}

func (k killmailStatDo) Take() (*model.KillmailStat, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.KillmailStat), nil
	}
}

func (k killmailStatDo) Last() (*model.KillmailStat, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.KillmailStat), nil
	}
}

func (k killmailStatDo) Find() ([]*model.KillmailStat, error) {
	result, err := k.DO.Find()
	return result.([]*model.KillmailStat), err
}

func (k killmailStatDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.KillmailStat, err error) {
	buf := make([]*model.KillmailStat, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k killmailStatDo) FindInBatches(result *[]*model.KillmailStat, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k killmailStatDo) Attrs(attrs ...field.AssignExpr) *killmailStatDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k killmailStatDo) Assign(attrs ...field.AssignExpr) *killmailStatDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k killmailStatDo) Joins(fields ...field.RelationField) *killmailStatDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k killmailStatDo) Preload(fields ...field.RelationField) *killmailStatDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k killmailStatDo) FirstOrInit() (*model.KillmailStat, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.KillmailStat), nil
	}
}

func (k killmailStatDo) FirstOrCreate() (*model.KillmailStat, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.KillmailStat), nil
	}
}

func (k killmailStatDo) FindByPage(offset int, limit int) (result []*model.KillmailStat, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k killmailStatDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k killmailStatDo) Scan(result interface{}) (err error) {
	return k.DO.Scan(result)
}

func (k killmailStatDo) Delete(models ...*model.KillmailStat) (result gen.ResultInfo, err error) {
	return k.DO.Delete(models)
}

func (k *killmailStatDo) withDO(do gen.Dao) *killmailStatDo {
	k.DO = *do.(*gen.DO)
	return k
}
