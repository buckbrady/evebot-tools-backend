// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/buckbrady/evebot-tools-backend/pkg/model"
)

func newUniverseAncestry(db *gorm.DB, opts ...gen.DOOption) universeAncestry {
	_universeAncestry := universeAncestry{}

	_universeAncestry.universeAncestryDo.UseDB(db, opts...)
	_universeAncestry.universeAncestryDo.UseModel(&model.UniverseAncestry{})

	tableName := _universeAncestry.universeAncestryDo.TableName()
	_universeAncestry.ALL = field.NewAsterisk(tableName)
	_universeAncestry.ID = field.NewInt32(tableName, "id")
	_universeAncestry.Name = field.NewString(tableName, "name")
	_universeAncestry.BloodlineID = field.NewInt32(tableName, "bloodline_id")
	_universeAncestry.Description = field.NewString(tableName, "description")
	_universeAncestry.IconID = field.NewInt32(tableName, "icon_id")
	_universeAncestry.ShortDescription = field.NewString(tableName, "short_description")

	_universeAncestry.fillFieldMap()

	return _universeAncestry
}

type universeAncestry struct {
	universeAncestryDo universeAncestryDo

	ALL              field.Asterisk
	ID               field.Int32
	Name             field.String
	BloodlineID      field.Int32
	Description      field.String
	IconID           field.Int32
	ShortDescription field.String

	fieldMap map[string]field.Expr
}

func (u universeAncestry) Table(newTableName string) *universeAncestry {
	u.universeAncestryDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u universeAncestry) As(alias string) *universeAncestry {
	u.universeAncestryDo.DO = *(u.universeAncestryDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *universeAncestry) updateTableName(table string) *universeAncestry {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.Name = field.NewString(table, "name")
	u.BloodlineID = field.NewInt32(table, "bloodline_id")
	u.Description = field.NewString(table, "description")
	u.IconID = field.NewInt32(table, "icon_id")
	u.ShortDescription = field.NewString(table, "short_description")

	u.fillFieldMap()

	return u
}

func (u *universeAncestry) WithContext(ctx context.Context) *universeAncestryDo {
	return u.universeAncestryDo.WithContext(ctx)
}

func (u universeAncestry) TableName() string { return u.universeAncestryDo.TableName() }

func (u universeAncestry) Alias() string { return u.universeAncestryDo.Alias() }

func (u universeAncestry) Columns(cols ...field.Expr) gen.Columns {
	return u.universeAncestryDo.Columns(cols...)
}

func (u *universeAncestry) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *universeAncestry) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["name"] = u.Name
	u.fieldMap["bloodline_id"] = u.BloodlineID
	u.fieldMap["description"] = u.Description
	u.fieldMap["icon_id"] = u.IconID
	u.fieldMap["short_description"] = u.ShortDescription
}

func (u universeAncestry) clone(db *gorm.DB) universeAncestry {
	u.universeAncestryDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u universeAncestry) replaceDB(db *gorm.DB) universeAncestry {
	u.universeAncestryDo.ReplaceDB(db)
	return u
}

type universeAncestryDo struct{ gen.DO }

func (u universeAncestryDo) Debug() *universeAncestryDo {
	return u.withDO(u.DO.Debug())
}

func (u universeAncestryDo) WithContext(ctx context.Context) *universeAncestryDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u universeAncestryDo) ReadDB() *universeAncestryDo {
	return u.Clauses(dbresolver.Read)
}

func (u universeAncestryDo) WriteDB() *universeAncestryDo {
	return u.Clauses(dbresolver.Write)
}

func (u universeAncestryDo) Session(config *gorm.Session) *universeAncestryDo {
	return u.withDO(u.DO.Session(config))
}

func (u universeAncestryDo) Clauses(conds ...clause.Expression) *universeAncestryDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u universeAncestryDo) Returning(value interface{}, columns ...string) *universeAncestryDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u universeAncestryDo) Not(conds ...gen.Condition) *universeAncestryDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u universeAncestryDo) Or(conds ...gen.Condition) *universeAncestryDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u universeAncestryDo) Select(conds ...field.Expr) *universeAncestryDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u universeAncestryDo) Where(conds ...gen.Condition) *universeAncestryDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u universeAncestryDo) Order(conds ...field.Expr) *universeAncestryDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u universeAncestryDo) Distinct(cols ...field.Expr) *universeAncestryDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u universeAncestryDo) Omit(cols ...field.Expr) *universeAncestryDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u universeAncestryDo) Join(table schema.Tabler, on ...field.Expr) *universeAncestryDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u universeAncestryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *universeAncestryDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u universeAncestryDo) RightJoin(table schema.Tabler, on ...field.Expr) *universeAncestryDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u universeAncestryDo) Group(cols ...field.Expr) *universeAncestryDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u universeAncestryDo) Having(conds ...gen.Condition) *universeAncestryDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u universeAncestryDo) Limit(limit int) *universeAncestryDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u universeAncestryDo) Offset(offset int) *universeAncestryDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u universeAncestryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *universeAncestryDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u universeAncestryDo) Unscoped() *universeAncestryDo {
	return u.withDO(u.DO.Unscoped())
}

func (u universeAncestryDo) Create(values ...*model.UniverseAncestry) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u universeAncestryDo) CreateInBatches(values []*model.UniverseAncestry, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u universeAncestryDo) Save(values ...*model.UniverseAncestry) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u universeAncestryDo) First() (*model.UniverseAncestry, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseAncestry), nil
	}
}

func (u universeAncestryDo) Take() (*model.UniverseAncestry, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseAncestry), nil
	}
}

func (u universeAncestryDo) Last() (*model.UniverseAncestry, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseAncestry), nil
	}
}

func (u universeAncestryDo) Find() ([]*model.UniverseAncestry, error) {
	result, err := u.DO.Find()
	return result.([]*model.UniverseAncestry), err
}

func (u universeAncestryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UniverseAncestry, err error) {
	buf := make([]*model.UniverseAncestry, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u universeAncestryDo) FindInBatches(result *[]*model.UniverseAncestry, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u universeAncestryDo) Attrs(attrs ...field.AssignExpr) *universeAncestryDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u universeAncestryDo) Assign(attrs ...field.AssignExpr) *universeAncestryDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u universeAncestryDo) Joins(fields ...field.RelationField) *universeAncestryDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u universeAncestryDo) Preload(fields ...field.RelationField) *universeAncestryDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u universeAncestryDo) FirstOrInit() (*model.UniverseAncestry, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseAncestry), nil
	}
}

func (u universeAncestryDo) FirstOrCreate() (*model.UniverseAncestry, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseAncestry), nil
	}
}

func (u universeAncestryDo) FindByPage(offset int, limit int) (result []*model.UniverseAncestry, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u universeAncestryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u universeAncestryDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u universeAncestryDo) Delete(models ...*model.UniverseAncestry) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *universeAncestryDo) withDO(do gen.Dao) *universeAncestryDo {
	u.DO = *do.(*gen.DO)
	return u
}
