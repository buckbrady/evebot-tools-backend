// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/buckbrady/evebot-tools-backend/pkg/model"
)

func newUniverseStargate(db *gorm.DB, opts ...gen.DOOption) universeStargate {
	_universeStargate := universeStargate{}

	_universeStargate.universeStargateDo.UseDB(db, opts...)
	_universeStargate.universeStargateDo.UseModel(&model.UniverseStargate{})

	tableName := _universeStargate.universeStargateDo.TableName()
	_universeStargate.ALL = field.NewAsterisk(tableName)
	_universeStargate.ID = field.NewInt32(tableName, "id")
	_universeStargate.Name = field.NewString(tableName, "name")
	_universeStargate.DestinationStargateID = field.NewInt32(tableName, "destination_stargate_id")
	_universeStargate.DestinationSystemID = field.NewInt32(tableName, "destination_system_id")
	_universeStargate.PositionX = field.NewFloat64(tableName, "position_x")
	_universeStargate.PositionY = field.NewFloat64(tableName, "position_y")
	_universeStargate.PositionZ = field.NewFloat64(tableName, "position_z")
	_universeStargate.TypeID = field.NewInt32(tableName, "type_id")

	_universeStargate.fillFieldMap()

	return _universeStargate
}

type universeStargate struct {
	universeStargateDo universeStargateDo

	ALL                   field.Asterisk
	ID                    field.Int32
	Name                  field.String
	DestinationStargateID field.Int32
	DestinationSystemID   field.Int32
	PositionX             field.Float64
	PositionY             field.Float64
	PositionZ             field.Float64
	TypeID                field.Int32

	fieldMap map[string]field.Expr
}

func (u universeStargate) Table(newTableName string) *universeStargate {
	u.universeStargateDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u universeStargate) As(alias string) *universeStargate {
	u.universeStargateDo.DO = *(u.universeStargateDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *universeStargate) updateTableName(table string) *universeStargate {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.Name = field.NewString(table, "name")
	u.DestinationStargateID = field.NewInt32(table, "destination_stargate_id")
	u.DestinationSystemID = field.NewInt32(table, "destination_system_id")
	u.PositionX = field.NewFloat64(table, "position_x")
	u.PositionY = field.NewFloat64(table, "position_y")
	u.PositionZ = field.NewFloat64(table, "position_z")
	u.TypeID = field.NewInt32(table, "type_id")

	u.fillFieldMap()

	return u
}

func (u *universeStargate) WithContext(ctx context.Context) *universeStargateDo {
	return u.universeStargateDo.WithContext(ctx)
}

func (u universeStargate) TableName() string { return u.universeStargateDo.TableName() }

func (u universeStargate) Alias() string { return u.universeStargateDo.Alias() }

func (u universeStargate) Columns(cols ...field.Expr) gen.Columns {
	return u.universeStargateDo.Columns(cols...)
}

func (u *universeStargate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *universeStargate) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["name"] = u.Name
	u.fieldMap["destination_stargate_id"] = u.DestinationStargateID
	u.fieldMap["destination_system_id"] = u.DestinationSystemID
	u.fieldMap["position_x"] = u.PositionX
	u.fieldMap["position_y"] = u.PositionY
	u.fieldMap["position_z"] = u.PositionZ
	u.fieldMap["type_id"] = u.TypeID
}

func (u universeStargate) clone(db *gorm.DB) universeStargate {
	u.universeStargateDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u universeStargate) replaceDB(db *gorm.DB) universeStargate {
	u.universeStargateDo.ReplaceDB(db)
	return u
}

type universeStargateDo struct{ gen.DO }

func (u universeStargateDo) Debug() *universeStargateDo {
	return u.withDO(u.DO.Debug())
}

func (u universeStargateDo) WithContext(ctx context.Context) *universeStargateDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u universeStargateDo) ReadDB() *universeStargateDo {
	return u.Clauses(dbresolver.Read)
}

func (u universeStargateDo) WriteDB() *universeStargateDo {
	return u.Clauses(dbresolver.Write)
}

func (u universeStargateDo) Session(config *gorm.Session) *universeStargateDo {
	return u.withDO(u.DO.Session(config))
}

func (u universeStargateDo) Clauses(conds ...clause.Expression) *universeStargateDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u universeStargateDo) Returning(value interface{}, columns ...string) *universeStargateDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u universeStargateDo) Not(conds ...gen.Condition) *universeStargateDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u universeStargateDo) Or(conds ...gen.Condition) *universeStargateDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u universeStargateDo) Select(conds ...field.Expr) *universeStargateDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u universeStargateDo) Where(conds ...gen.Condition) *universeStargateDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u universeStargateDo) Order(conds ...field.Expr) *universeStargateDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u universeStargateDo) Distinct(cols ...field.Expr) *universeStargateDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u universeStargateDo) Omit(cols ...field.Expr) *universeStargateDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u universeStargateDo) Join(table schema.Tabler, on ...field.Expr) *universeStargateDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u universeStargateDo) LeftJoin(table schema.Tabler, on ...field.Expr) *universeStargateDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u universeStargateDo) RightJoin(table schema.Tabler, on ...field.Expr) *universeStargateDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u universeStargateDo) Group(cols ...field.Expr) *universeStargateDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u universeStargateDo) Having(conds ...gen.Condition) *universeStargateDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u universeStargateDo) Limit(limit int) *universeStargateDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u universeStargateDo) Offset(offset int) *universeStargateDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u universeStargateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *universeStargateDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u universeStargateDo) Unscoped() *universeStargateDo {
	return u.withDO(u.DO.Unscoped())
}

func (u universeStargateDo) Create(values ...*model.UniverseStargate) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u universeStargateDo) CreateInBatches(values []*model.UniverseStargate, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u universeStargateDo) Save(values ...*model.UniverseStargate) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u universeStargateDo) First() (*model.UniverseStargate, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseStargate), nil
	}
}

func (u universeStargateDo) Take() (*model.UniverseStargate, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseStargate), nil
	}
}

func (u universeStargateDo) Last() (*model.UniverseStargate, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseStargate), nil
	}
}

func (u universeStargateDo) Find() ([]*model.UniverseStargate, error) {
	result, err := u.DO.Find()
	return result.([]*model.UniverseStargate), err
}

func (u universeStargateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UniverseStargate, err error) {
	buf := make([]*model.UniverseStargate, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u universeStargateDo) FindInBatches(result *[]*model.UniverseStargate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u universeStargateDo) Attrs(attrs ...field.AssignExpr) *universeStargateDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u universeStargateDo) Assign(attrs ...field.AssignExpr) *universeStargateDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u universeStargateDo) Joins(fields ...field.RelationField) *universeStargateDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u universeStargateDo) Preload(fields ...field.RelationField) *universeStargateDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u universeStargateDo) FirstOrInit() (*model.UniverseStargate, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseStargate), nil
	}
}

func (u universeStargateDo) FirstOrCreate() (*model.UniverseStargate, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseStargate), nil
	}
}

func (u universeStargateDo) FindByPage(offset int, limit int) (result []*model.UniverseStargate, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u universeStargateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u universeStargateDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u universeStargateDo) Delete(models ...*model.UniverseStargate) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *universeStargateDo) withDO(do gen.Dao) *universeStargateDo {
	u.DO = *do.(*gen.DO)
	return u
}
