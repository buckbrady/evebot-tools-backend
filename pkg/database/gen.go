// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                          db,
		Alliance:                    newAlliance(db, opts...),
		AllianceIcon:                newAllianceIcon(db, opts...),
		Character:                   newCharacter(db, opts...),
		CharacterCorporationHistory: newCharacterCorporationHistory(db, opts...),
		CharacterPortrait:           newCharacterPortrait(db, opts...),
		Contract:                    newContract(db, opts...),
		ContractBid:                 newContractBid(db, opts...),
		ContractItem:                newContractItem(db, opts...),
		Corporation:                 newCorporation(db, opts...),
		CorporationAllianceHistory:  newCorporationAllianceHistory(db, opts...),
		CorporationIcon:             newCorporationIcon(db, opts...),
		Killmail:                    newKillmail(db, opts...),
		KillmailAttacker:            newKillmailAttacker(db, opts...),
		KillmailItem:                newKillmailItem(db, opts...),
		KillmailStat:                newKillmailStat(db, opts...),
		KillmailVictim:              newKillmailVictim(db, opts...),
		MarketGroup:                 newMarketGroup(db, opts...),
		MarketHistory:               newMarketHistory(db, opts...),
		MarketOrder:                 newMarketOrder(db, opts...),
		MarketPrice:                 newMarketPrice(db, opts...),
		ServerStatus:                newServerStatus(db, opts...),
		UniverseAncestry:            newUniverseAncestry(db, opts...),
		UniverseAstroidBelt:         newUniverseAstroidBelt(db, opts...),
		UniverseBloodline:           newUniverseBloodline(db, opts...),
		UniverseCategory:            newUniverseCategory(db, opts...),
		UniverseConstellation:       newUniverseConstellation(db, opts...),
		UniverseFaction:             newUniverseFaction(db, opts...),
		UniverseGraphic:             newUniverseGraphic(db, opts...),
		UniverseGroup:               newUniverseGroup(db, opts...),
		UniverseMoon:                newUniverseMoon(db, opts...),
		UniversePlanet:              newUniversePlanet(db, opts...),
		UniverseRace:                newUniverseRace(db, opts...),
		UniverseRegion:              newUniverseRegion(db, opts...),
		UniverseStar:                newUniverseStar(db, opts...),
		UniverseStargate:            newUniverseStargate(db, opts...),
		UniverseStation:             newUniverseStation(db, opts...),
		UniverseStationService:      newUniverseStationService(db, opts...),
		UniverseStructure:           newUniverseStructure(db, opts...),
		UniverseSystem:              newUniverseSystem(db, opts...),
		UniverseSystemJump:          newUniverseSystemJump(db, opts...),
		UniverseSystemKill:          newUniverseSystemKill(db, opts...),
		UniverseType:                newUniverseType(db, opts...),
		UniverseTypeDogmaAttribute:  newUniverseTypeDogmaAttribute(db, opts...),
		UniverseTypeDogmaEffect:     newUniverseTypeDogmaEffect(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Alliance                    alliance
	AllianceIcon                allianceIcon
	Character                   character
	CharacterCorporationHistory characterCorporationHistory
	CharacterPortrait           characterPortrait
	Contract                    contract
	ContractBid                 contractBid
	ContractItem                contractItem
	Corporation                 corporation
	CorporationAllianceHistory  corporationAllianceHistory
	CorporationIcon             corporationIcon
	Killmail                    killmail
	KillmailAttacker            killmailAttacker
	KillmailItem                killmailItem
	KillmailStat                killmailStat
	KillmailVictim              killmailVictim
	MarketGroup                 marketGroup
	MarketHistory               marketHistory
	MarketOrder                 marketOrder
	MarketPrice                 marketPrice
	ServerStatus                serverStatus
	UniverseAncestry            universeAncestry
	UniverseAstroidBelt         universeAstroidBelt
	UniverseBloodline           universeBloodline
	UniverseCategory            universeCategory
	UniverseConstellation       universeConstellation
	UniverseFaction             universeFaction
	UniverseGraphic             universeGraphic
	UniverseGroup               universeGroup
	UniverseMoon                universeMoon
	UniversePlanet              universePlanet
	UniverseRace                universeRace
	UniverseRegion              universeRegion
	UniverseStar                universeStar
	UniverseStargate            universeStargate
	UniverseStation             universeStation
	UniverseStationService      universeStationService
	UniverseStructure           universeStructure
	UniverseSystem              universeSystem
	UniverseSystemJump          universeSystemJump
	UniverseSystemKill          universeSystemKill
	UniverseType                universeType
	UniverseTypeDogmaAttribute  universeTypeDogmaAttribute
	UniverseTypeDogmaEffect     universeTypeDogmaEffect
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                          db,
		Alliance:                    q.Alliance.clone(db),
		AllianceIcon:                q.AllianceIcon.clone(db),
		Character:                   q.Character.clone(db),
		CharacterCorporationHistory: q.CharacterCorporationHistory.clone(db),
		CharacterPortrait:           q.CharacterPortrait.clone(db),
		Contract:                    q.Contract.clone(db),
		ContractBid:                 q.ContractBid.clone(db),
		ContractItem:                q.ContractItem.clone(db),
		Corporation:                 q.Corporation.clone(db),
		CorporationAllianceHistory:  q.CorporationAllianceHistory.clone(db),
		CorporationIcon:             q.CorporationIcon.clone(db),
		Killmail:                    q.Killmail.clone(db),
		KillmailAttacker:            q.KillmailAttacker.clone(db),
		KillmailItem:                q.KillmailItem.clone(db),
		KillmailStat:                q.KillmailStat.clone(db),
		KillmailVictim:              q.KillmailVictim.clone(db),
		MarketGroup:                 q.MarketGroup.clone(db),
		MarketHistory:               q.MarketHistory.clone(db),
		MarketOrder:                 q.MarketOrder.clone(db),
		MarketPrice:                 q.MarketPrice.clone(db),
		ServerStatus:                q.ServerStatus.clone(db),
		UniverseAncestry:            q.UniverseAncestry.clone(db),
		UniverseAstroidBelt:         q.UniverseAstroidBelt.clone(db),
		UniverseBloodline:           q.UniverseBloodline.clone(db),
		UniverseCategory:            q.UniverseCategory.clone(db),
		UniverseConstellation:       q.UniverseConstellation.clone(db),
		UniverseFaction:             q.UniverseFaction.clone(db),
		UniverseGraphic:             q.UniverseGraphic.clone(db),
		UniverseGroup:               q.UniverseGroup.clone(db),
		UniverseMoon:                q.UniverseMoon.clone(db),
		UniversePlanet:              q.UniversePlanet.clone(db),
		UniverseRace:                q.UniverseRace.clone(db),
		UniverseRegion:              q.UniverseRegion.clone(db),
		UniverseStar:                q.UniverseStar.clone(db),
		UniverseStargate:            q.UniverseStargate.clone(db),
		UniverseStation:             q.UniverseStation.clone(db),
		UniverseStationService:      q.UniverseStationService.clone(db),
		UniverseStructure:           q.UniverseStructure.clone(db),
		UniverseSystem:              q.UniverseSystem.clone(db),
		UniverseSystemJump:          q.UniverseSystemJump.clone(db),
		UniverseSystemKill:          q.UniverseSystemKill.clone(db),
		UniverseType:                q.UniverseType.clone(db),
		UniverseTypeDogmaAttribute:  q.UniverseTypeDogmaAttribute.clone(db),
		UniverseTypeDogmaEffect:     q.UniverseTypeDogmaEffect.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                          db,
		Alliance:                    q.Alliance.replaceDB(db),
		AllianceIcon:                q.AllianceIcon.replaceDB(db),
		Character:                   q.Character.replaceDB(db),
		CharacterCorporationHistory: q.CharacterCorporationHistory.replaceDB(db),
		CharacterPortrait:           q.CharacterPortrait.replaceDB(db),
		Contract:                    q.Contract.replaceDB(db),
		ContractBid:                 q.ContractBid.replaceDB(db),
		ContractItem:                q.ContractItem.replaceDB(db),
		Corporation:                 q.Corporation.replaceDB(db),
		CorporationAllianceHistory:  q.CorporationAllianceHistory.replaceDB(db),
		CorporationIcon:             q.CorporationIcon.replaceDB(db),
		Killmail:                    q.Killmail.replaceDB(db),
		KillmailAttacker:            q.KillmailAttacker.replaceDB(db),
		KillmailItem:                q.KillmailItem.replaceDB(db),
		KillmailStat:                q.KillmailStat.replaceDB(db),
		KillmailVictim:              q.KillmailVictim.replaceDB(db),
		MarketGroup:                 q.MarketGroup.replaceDB(db),
		MarketHistory:               q.MarketHistory.replaceDB(db),
		MarketOrder:                 q.MarketOrder.replaceDB(db),
		MarketPrice:                 q.MarketPrice.replaceDB(db),
		ServerStatus:                q.ServerStatus.replaceDB(db),
		UniverseAncestry:            q.UniverseAncestry.replaceDB(db),
		UniverseAstroidBelt:         q.UniverseAstroidBelt.replaceDB(db),
		UniverseBloodline:           q.UniverseBloodline.replaceDB(db),
		UniverseCategory:            q.UniverseCategory.replaceDB(db),
		UniverseConstellation:       q.UniverseConstellation.replaceDB(db),
		UniverseFaction:             q.UniverseFaction.replaceDB(db),
		UniverseGraphic:             q.UniverseGraphic.replaceDB(db),
		UniverseGroup:               q.UniverseGroup.replaceDB(db),
		UniverseMoon:                q.UniverseMoon.replaceDB(db),
		UniversePlanet:              q.UniversePlanet.replaceDB(db),
		UniverseRace:                q.UniverseRace.replaceDB(db),
		UniverseRegion:              q.UniverseRegion.replaceDB(db),
		UniverseStar:                q.UniverseStar.replaceDB(db),
		UniverseStargate:            q.UniverseStargate.replaceDB(db),
		UniverseStation:             q.UniverseStation.replaceDB(db),
		UniverseStationService:      q.UniverseStationService.replaceDB(db),
		UniverseStructure:           q.UniverseStructure.replaceDB(db),
		UniverseSystem:              q.UniverseSystem.replaceDB(db),
		UniverseSystemJump:          q.UniverseSystemJump.replaceDB(db),
		UniverseSystemKill:          q.UniverseSystemKill.replaceDB(db),
		UniverseType:                q.UniverseType.replaceDB(db),
		UniverseTypeDogmaAttribute:  q.UniverseTypeDogmaAttribute.replaceDB(db),
		UniverseTypeDogmaEffect:     q.UniverseTypeDogmaEffect.replaceDB(db),
	}
}

type queryCtx struct {
	Alliance                    *allianceDo
	AllianceIcon                *allianceIconDo
	Character                   *characterDo
	CharacterCorporationHistory *characterCorporationHistoryDo
	CharacterPortrait           *characterPortraitDo
	Contract                    *contractDo
	ContractBid                 *contractBidDo
	ContractItem                *contractItemDo
	Corporation                 *corporationDo
	CorporationAllianceHistory  *corporationAllianceHistoryDo
	CorporationIcon             *corporationIconDo
	Killmail                    *killmailDo
	KillmailAttacker            *killmailAttackerDo
	KillmailItem                *killmailItemDo
	KillmailStat                *killmailStatDo
	KillmailVictim              *killmailVictimDo
	MarketGroup                 *marketGroupDo
	MarketHistory               *marketHistoryDo
	MarketOrder                 *marketOrderDo
	MarketPrice                 *marketPriceDo
	ServerStatus                *serverStatusDo
	UniverseAncestry            *universeAncestryDo
	UniverseAstroidBelt         *universeAstroidBeltDo
	UniverseBloodline           *universeBloodlineDo
	UniverseCategory            *universeCategoryDo
	UniverseConstellation       *universeConstellationDo
	UniverseFaction             *universeFactionDo
	UniverseGraphic             *universeGraphicDo
	UniverseGroup               *universeGroupDo
	UniverseMoon                *universeMoonDo
	UniversePlanet              *universePlanetDo
	UniverseRace                *universeRaceDo
	UniverseRegion              *universeRegionDo
	UniverseStar                *universeStarDo
	UniverseStargate            *universeStargateDo
	UniverseStation             *universeStationDo
	UniverseStationService      *universeStationServiceDo
	UniverseStructure           *universeStructureDo
	UniverseSystem              *universeSystemDo
	UniverseSystemJump          *universeSystemJumpDo
	UniverseSystemKill          *universeSystemKillDo
	UniverseType                *universeTypeDo
	UniverseTypeDogmaAttribute  *universeTypeDogmaAttributeDo
	UniverseTypeDogmaEffect     *universeTypeDogmaEffectDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Alliance:                    q.Alliance.WithContext(ctx),
		AllianceIcon:                q.AllianceIcon.WithContext(ctx),
		Character:                   q.Character.WithContext(ctx),
		CharacterCorporationHistory: q.CharacterCorporationHistory.WithContext(ctx),
		CharacterPortrait:           q.CharacterPortrait.WithContext(ctx),
		Contract:                    q.Contract.WithContext(ctx),
		ContractBid:                 q.ContractBid.WithContext(ctx),
		ContractItem:                q.ContractItem.WithContext(ctx),
		Corporation:                 q.Corporation.WithContext(ctx),
		CorporationAllianceHistory:  q.CorporationAllianceHistory.WithContext(ctx),
		CorporationIcon:             q.CorporationIcon.WithContext(ctx),
		Killmail:                    q.Killmail.WithContext(ctx),
		KillmailAttacker:            q.KillmailAttacker.WithContext(ctx),
		KillmailItem:                q.KillmailItem.WithContext(ctx),
		KillmailStat:                q.KillmailStat.WithContext(ctx),
		KillmailVictim:              q.KillmailVictim.WithContext(ctx),
		MarketGroup:                 q.MarketGroup.WithContext(ctx),
		MarketHistory:               q.MarketHistory.WithContext(ctx),
		MarketOrder:                 q.MarketOrder.WithContext(ctx),
		MarketPrice:                 q.MarketPrice.WithContext(ctx),
		ServerStatus:                q.ServerStatus.WithContext(ctx),
		UniverseAncestry:            q.UniverseAncestry.WithContext(ctx),
		UniverseAstroidBelt:         q.UniverseAstroidBelt.WithContext(ctx),
		UniverseBloodline:           q.UniverseBloodline.WithContext(ctx),
		UniverseCategory:            q.UniverseCategory.WithContext(ctx),
		UniverseConstellation:       q.UniverseConstellation.WithContext(ctx),
		UniverseFaction:             q.UniverseFaction.WithContext(ctx),
		UniverseGraphic:             q.UniverseGraphic.WithContext(ctx),
		UniverseGroup:               q.UniverseGroup.WithContext(ctx),
		UniverseMoon:                q.UniverseMoon.WithContext(ctx),
		UniversePlanet:              q.UniversePlanet.WithContext(ctx),
		UniverseRace:                q.UniverseRace.WithContext(ctx),
		UniverseRegion:              q.UniverseRegion.WithContext(ctx),
		UniverseStar:                q.UniverseStar.WithContext(ctx),
		UniverseStargate:            q.UniverseStargate.WithContext(ctx),
		UniverseStation:             q.UniverseStation.WithContext(ctx),
		UniverseStationService:      q.UniverseStationService.WithContext(ctx),
		UniverseStructure:           q.UniverseStructure.WithContext(ctx),
		UniverseSystem:              q.UniverseSystem.WithContext(ctx),
		UniverseSystemJump:          q.UniverseSystemJump.WithContext(ctx),
		UniverseSystemKill:          q.UniverseSystemKill.WithContext(ctx),
		UniverseType:                q.UniverseType.WithContext(ctx),
		UniverseTypeDogmaAttribute:  q.UniverseTypeDogmaAttribute.WithContext(ctx),
		UniverseTypeDogmaEffect:     q.UniverseTypeDogmaEffect.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
