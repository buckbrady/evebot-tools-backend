// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/buckbrady/evebot-tools-backend/pkg/model"
)

func newUniverseStation(db *gorm.DB, opts ...gen.DOOption) universeStation {
	_universeStation := universeStation{}

	_universeStation.universeStationDo.UseDB(db, opts...)
	_universeStation.universeStationDo.UseModel(&model.UniverseStation{})

	tableName := _universeStation.universeStationDo.TableName()
	_universeStation.ALL = field.NewAsterisk(tableName)
	_universeStation.ID = field.NewInt32(tableName, "id")
	_universeStation.Name = field.NewString(tableName, "name")
	_universeStation.Owner = field.NewInt32(tableName, "owner")
	_universeStation.MaxDockableShipVolume = field.NewFloat64(tableName, "max_dockable_ship_volume")
	_universeStation.OfficeRentalCost = field.NewFloat64(tableName, "office_rental_cost")
	_universeStation.PositionX = field.NewFloat64(tableName, "position_x")
	_universeStation.PositionY = field.NewFloat64(tableName, "position_y")
	_universeStation.PositionZ = field.NewFloat64(tableName, "position_z")
	_universeStation.RaceID = field.NewInt32(tableName, "race_id")
	_universeStation.ReprocessingEfficiency = field.NewFloat64(tableName, "reprocessing_efficiency")
	_universeStation.ReprocessingStationsTake = field.NewFloat64(tableName, "reprocessing_stations_take")
	_universeStation.SystemID = field.NewInt32(tableName, "system_id")
	_universeStation.TypeID = field.NewInt32(tableName, "type_id")

	_universeStation.fillFieldMap()

	return _universeStation
}

type universeStation struct {
	universeStationDo universeStationDo

	ALL                      field.Asterisk
	ID                       field.Int32
	Name                     field.String
	Owner                    field.Int32
	MaxDockableShipVolume    field.Float64
	OfficeRentalCost         field.Float64
	PositionX                field.Float64
	PositionY                field.Float64
	PositionZ                field.Float64
	RaceID                   field.Int32
	ReprocessingEfficiency   field.Float64
	ReprocessingStationsTake field.Float64
	SystemID                 field.Int32
	TypeID                   field.Int32

	fieldMap map[string]field.Expr
}

func (u universeStation) Table(newTableName string) *universeStation {
	u.universeStationDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u universeStation) As(alias string) *universeStation {
	u.universeStationDo.DO = *(u.universeStationDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *universeStation) updateTableName(table string) *universeStation {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.Name = field.NewString(table, "name")
	u.Owner = field.NewInt32(table, "owner")
	u.MaxDockableShipVolume = field.NewFloat64(table, "max_dockable_ship_volume")
	u.OfficeRentalCost = field.NewFloat64(table, "office_rental_cost")
	u.PositionX = field.NewFloat64(table, "position_x")
	u.PositionY = field.NewFloat64(table, "position_y")
	u.PositionZ = field.NewFloat64(table, "position_z")
	u.RaceID = field.NewInt32(table, "race_id")
	u.ReprocessingEfficiency = field.NewFloat64(table, "reprocessing_efficiency")
	u.ReprocessingStationsTake = field.NewFloat64(table, "reprocessing_stations_take")
	u.SystemID = field.NewInt32(table, "system_id")
	u.TypeID = field.NewInt32(table, "type_id")

	u.fillFieldMap()

	return u
}

func (u *universeStation) WithContext(ctx context.Context) *universeStationDo {
	return u.universeStationDo.WithContext(ctx)
}

func (u universeStation) TableName() string { return u.universeStationDo.TableName() }

func (u universeStation) Alias() string { return u.universeStationDo.Alias() }

func (u universeStation) Columns(cols ...field.Expr) gen.Columns {
	return u.universeStationDo.Columns(cols...)
}

func (u *universeStation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *universeStation) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 13)
	u.fieldMap["id"] = u.ID
	u.fieldMap["name"] = u.Name
	u.fieldMap["owner"] = u.Owner
	u.fieldMap["max_dockable_ship_volume"] = u.MaxDockableShipVolume
	u.fieldMap["office_rental_cost"] = u.OfficeRentalCost
	u.fieldMap["position_x"] = u.PositionX
	u.fieldMap["position_y"] = u.PositionY
	u.fieldMap["position_z"] = u.PositionZ
	u.fieldMap["race_id"] = u.RaceID
	u.fieldMap["reprocessing_efficiency"] = u.ReprocessingEfficiency
	u.fieldMap["reprocessing_stations_take"] = u.ReprocessingStationsTake
	u.fieldMap["system_id"] = u.SystemID
	u.fieldMap["type_id"] = u.TypeID
}

func (u universeStation) clone(db *gorm.DB) universeStation {
	u.universeStationDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u universeStation) replaceDB(db *gorm.DB) universeStation {
	u.universeStationDo.ReplaceDB(db)
	return u
}

type universeStationDo struct{ gen.DO }

func (u universeStationDo) Debug() *universeStationDo {
	return u.withDO(u.DO.Debug())
}

func (u universeStationDo) WithContext(ctx context.Context) *universeStationDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u universeStationDo) ReadDB() *universeStationDo {
	return u.Clauses(dbresolver.Read)
}

func (u universeStationDo) WriteDB() *universeStationDo {
	return u.Clauses(dbresolver.Write)
}

func (u universeStationDo) Session(config *gorm.Session) *universeStationDo {
	return u.withDO(u.DO.Session(config))
}

func (u universeStationDo) Clauses(conds ...clause.Expression) *universeStationDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u universeStationDo) Returning(value interface{}, columns ...string) *universeStationDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u universeStationDo) Not(conds ...gen.Condition) *universeStationDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u universeStationDo) Or(conds ...gen.Condition) *universeStationDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u universeStationDo) Select(conds ...field.Expr) *universeStationDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u universeStationDo) Where(conds ...gen.Condition) *universeStationDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u universeStationDo) Order(conds ...field.Expr) *universeStationDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u universeStationDo) Distinct(cols ...field.Expr) *universeStationDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u universeStationDo) Omit(cols ...field.Expr) *universeStationDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u universeStationDo) Join(table schema.Tabler, on ...field.Expr) *universeStationDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u universeStationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *universeStationDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u universeStationDo) RightJoin(table schema.Tabler, on ...field.Expr) *universeStationDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u universeStationDo) Group(cols ...field.Expr) *universeStationDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u universeStationDo) Having(conds ...gen.Condition) *universeStationDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u universeStationDo) Limit(limit int) *universeStationDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u universeStationDo) Offset(offset int) *universeStationDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u universeStationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *universeStationDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u universeStationDo) Unscoped() *universeStationDo {
	return u.withDO(u.DO.Unscoped())
}

func (u universeStationDo) Create(values ...*model.UniverseStation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u universeStationDo) CreateInBatches(values []*model.UniverseStation, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u universeStationDo) Save(values ...*model.UniverseStation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u universeStationDo) First() (*model.UniverseStation, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseStation), nil
	}
}

func (u universeStationDo) Take() (*model.UniverseStation, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseStation), nil
	}
}

func (u universeStationDo) Last() (*model.UniverseStation, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseStation), nil
	}
}

func (u universeStationDo) Find() ([]*model.UniverseStation, error) {
	result, err := u.DO.Find()
	return result.([]*model.UniverseStation), err
}

func (u universeStationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UniverseStation, err error) {
	buf := make([]*model.UniverseStation, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u universeStationDo) FindInBatches(result *[]*model.UniverseStation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u universeStationDo) Attrs(attrs ...field.AssignExpr) *universeStationDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u universeStationDo) Assign(attrs ...field.AssignExpr) *universeStationDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u universeStationDo) Joins(fields ...field.RelationField) *universeStationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u universeStationDo) Preload(fields ...field.RelationField) *universeStationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u universeStationDo) FirstOrInit() (*model.UniverseStation, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseStation), nil
	}
}

func (u universeStationDo) FirstOrCreate() (*model.UniverseStation, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UniverseStation), nil
	}
}

func (u universeStationDo) FindByPage(offset int, limit int) (result []*model.UniverseStation, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u universeStationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u universeStationDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u universeStationDo) Delete(models ...*model.UniverseStation) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *universeStationDo) withDO(do gen.Dao) *universeStationDo {
	u.DO = *do.(*gen.DO)
	return u
}
